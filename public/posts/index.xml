<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Gold</title>
        <link>https://goldpumpkin.life/posts/</link>
        <description>Recent content in Posts on Gold</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 25 Sep 2020 00:00:00 +0000</lastBuildDate>
        <atom:link href="https://goldpumpkin.life/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>怎么写可测试代码？为什么写可测试代码是重要的呢？</title>
            <link>https://goldpumpkin.life/posts/2020/09/%E6%80%8E%E4%B9%88%E5%86%99%E5%8F%AF%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E5%8F%AF%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E6%98%AF%E9%87%8D%E8%A6%81%E7%9A%84%E5%91%A2/</link>
            <pubDate>Fri, 25 Sep 2020 00:00:00 +0000</pubDate>
            
            <guid>https://goldpumpkin.life/posts/2020/09/%E6%80%8E%E4%B9%88%E5%86%99%E5%8F%AF%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%99%E5%8F%AF%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81%E6%98%AF%E9%87%8D%E8%A6%81%E7%9A%84%E5%91%A2/</guid>
            <description>&lt;p&gt;最近 leader 在要求每次开发新需求时同时要编写单元测试，之前很少会写单元测试，对单元测试的理解比较浅，刚好看到一篇介绍比较细致的文章。那就容我用蹩脚的英语翻译一下（英文很棒的同学直接到本文尾部访问原文链接吧），和大家一起讨论学习下。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>最近 leader 在要求每次开发新需求时同时要编写单元测试，之前很少会写单元测试，对单元测试的理解比较浅，刚好看到一篇介绍比较细致的文章。那就容我用蹩脚的英语翻译一下（英文很棒的同学直接到本文尾部访问原文链接吧），和大家一起讨论学习下。</p>
<h2 id="开始">开始</h2>
<p>单元测试是任何一个有态度的软件开发工程师的工具箱中必备的工具。然而，有时候对一段特定的代码，编写一个好的单元测试是一件让人头疼的事情。开发人员在自测或者测试其他人代码遇到困难时，他们常常认为，由于自身缺乏一些基本的测试知识或者没有掌握单元测试技巧导致的。</p>
<p>在这篇单元测试教程中，我要证明一下写好单元测试是非常容易的。其实，使得单元测试变得复杂化，或者说给单元测试带来昂贵复杂性的是，代码的不良设计和不可测试性。接下来，我们将讨论，是什么使得代码变的很难测试，而为了提高的代码可测试性，我们又该怎么避免那些反模式和不良实践呢，最后我们聊一下，通过编写可测试代码会给我们带来其他哪些好处。我们将看到，编写单元测试和生成可测试代码不仅仅是为了减少测试的麻烦，也是为了使得代码本身变得更加健壮和更易于维护。</p>
<p><img src="http://qiniu.5ires.top/uPic/toptal-blog-image-1434578005589-4e6897ec04cc0b3c7075b9b011ee915c.gif" alt="UT-1"></p>
<h2 id="什么是单元测试">什么是单元测试？</h2>
<p>本质上，一个单元测试就是我们应用程序的一个方法，这个方法的行为可以<strong>独立于应用的其他部分</strong>被验证。一个典型单元测试包括三个阶段：首先，初始化要测试应用程序的一小部分（也称为<a href="https://zh.wikipedia.org/zh-hans/%E8%A2%AB%E6%B5%8B%E7%B3%BB%E7%BB%9F">被测系统</a>，即 SUT）。然后，对被测系统应用一些刺激（通常对其调用一个方法）。最后，观察被测系统的行为结果。如果行为结果和预期的保持一致，那么单元测试通过。否则，不通过，同时表明了被测系统中存在问题。这三个测试阶段也成称为：Arrange、Act 和 Assert，简称 AAA。</p>
<p>单元测试可以验证被测系统的不同方面的行为，但大体上行为可以分为两类：<em>基于状态</em>的或者是<em>基于交互</em>的。验证被测系统是否产生正确的结果，称为<strong>基于状态</strong>的单元测试。验证被测系统是否正确调用某些方法，称为<strong>基于交互</strong>的单元测试</p>
<p>现在就换一种方式来解释下软件的单元测试。想象有一个疯狂的科学家，想构造一些超自然的<a href="https://zh.wikipedia.org/wiki/%E5%B5%8C%E5%90%88%E9%AB%94">生物嵌合体</a>，材料包括青蛙腿、章鱼触角、鸟翅膀和狗头（这个比喻非常贴近程序员在日常中的实际工作）。那这个科学家如何保证他挑选的每个生物单元都能正常工作呢？他可以做一些小试验，比方说，拿一只青蛙的腿，对它施加电刺激，然后检查肌肉是否适当收缩。其实他现在所做的基本上与单元测试的 Arrange-Act-Assert 步骤是相同的；唯一的区别是，在这种情况下，单元指的是物理对象，而不是我们用来构建程序的抽象对象。</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200929142032175.png" alt="UT-Crazy-1"></p>
<p>如下是一个简单的单元测试（英文原文是用 c# 编写的示例，本文大部分用 java 来编写示例）</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200925170621777.png" alt="unit test simple example"></p>
<h2 id="单元测试-vs-集成测试">单元测试 vs 集成测试</h2>
<p>另一个需要考虑的重要问题是单元测试和集成测试之间的区别。</p>
<p>软件工程中的单元测试的目的是验证独立于应用其他部分的代码行为。单元测试的代码范围很窄小，这样就允许我们覆盖所有情况，以确保每个部分都能正确工作。</p>
<p>另一方面，集成测试则演示的是，系统的不同部分在实际环境中协同工作的情况。验证的场景相对比较复杂，一般需要借助外部资源，比如数据库或web服务器等。</p>
<p>让我们回到疯狂科学家的比喻中，设想他现在已经成功地将各个生物器官结合起来了。他想对这个组合好的生物体进行测试。比如，验证这个生物体可以在不同地形上行走。那么他首先需要建立一个生物可以行走的环境。之后，把组合生物体扔进去，用棍子戳他，观察它是否按照预想的设计行走和移动。在完成测试后，疯狂的科学家还需要清理他可爱的实验室里所有散落的泥土、沙子和岩石。</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200929142259927.png" alt="UT-Crazy-2"></p>
<p>请注意单元测试和集成测试之间的显著区别是：<em>单元测试是验证应用程序中一小部分的行为，独立于环境和其他部分，并且非常容易实现；而集成测试则涵盖了在接近真实生活环境中的不同组件之间的交互，并且需要更多的工作，包括额外的安装和拆卸阶段。</em></p>
<p>合理的结合单元测试和集成测试可以确保，每个单元都能独立于其他单元正常工作，并且所有这些单元在集成时都能很好地发挥作用，这让我们对整个系统在生产环境中正常运行有了很大的信心。</p>
<h2 id="什么是好的单元测试">什么是好的单元测试？</h2>
<p>在深入学习本教程的主要部分，进行编写单元测试之前，让我们先快速讨论一下，一个好的单元测试应该具备哪些属性。一个好单元测试应该具备以下属性：</p>
<ul>
<li>
<p><strong>易写</strong></p>
<p>开发人员通常编写大量的单元测试，来覆盖应用的可能出现的不同行为和不同方面。这就要求单测是不需要花费程序员大量精力就可以轻松编写的。</p>
</li>
<li>
<p><strong>可读性</strong></p>
<p>单元测试的目的应该是明确的。单元测试描述的是我们应用中某个行为的影响，因此一个好的单元测试应该很容易让人理解正在测试的是哪种场景。如果单测失败，也很容易知道问题点在哪里。一个好的单元测试，让我们可以在不 debug 的情况下修复错误！</p>
</li>
<li>
<p><strong>可靠</strong></p>
<p>单测只有在系统有 bug 的情况下才会失败。虽然这看起来很明显，但是有些程序经常即使没有bug，也出现测试失败的情况。例如，测试可能在某个运行时通过，但是在运行整个测试套件时失败，或者是在开发环境单测通过，但是在集成环境中单测失败。这些情况表明单测存在设计缺陷。好的单元测试是可以重复执行的，并且不受环境或运行顺序等外部因素的影响。</p>
</li>
<li>
<p><strong>运行快</strong></p>
<p>开发人员编写单元测试是为了重复执行，以检测新代码是否引入了新的 bug。如果单元测试很慢，开发人员很可能不会在他们的机器上运行单元测试。一个慢的单测，可能不会造成很大的影响，但是一千个慢的单测，那将会浪费很多时间了。慢的单测可能还表明了被测系统和单测本身可能和外部系统产生了交互，单测可能依赖外部因素。</p>
</li>
<li>
<p><strong>真单元，非集成</strong></p>
<p>正如我们刚刚已经讨论过的，单元测试和集成测试有不同的目的，我们要区分开。单元测试和被测系统都不应访问网络资源、数据库和文件系统等，避免受到外部因素的影响。</p>
</li>
</ul>
<p>这就是单元测试，<em>并没有什么秘密</em>。此外，还有一些编写单元测试的技巧。</p>
<h2 id="可测试和不可测试代码">可测试和不可测试代码</h2>
<p>有些的代码的编写方式使得为其写一个好的单测是很困难的。那么，是什么让代码变得难以测试呢？让我们回顾一下我们在编写代码时候，应该避免的反模式、代码坏味道和不良实践。</p>
<h3 id="毒害代码库的因素之不确定因素">毒害代码库的因素之不确定因素</h3>
<p>从一个简单的例子开始。假设我们正在为一个智能家庭微控制器编写一个程序，其中一个需求是，如果是在傍晚或晚上检测到后院有运动，那么就自动打开灯。我们现在就先实现一个方法，该方法返回一天中各阶段的大致时间，用字符串表示 “Night”, “Morning”, “Afternoon” or “Evening”:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">getTimeOfDay</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  DateTime time <span style="color:#f92672">=</span> DateTime<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> hour <span style="color:#f92672">=</span> DateUtil<span style="color:#f92672">.</span><span style="color:#a6e22e">hour</span><span style="color:#f92672">(</span>time<span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>hour <span style="color:#f92672">&gt;=</span> 0 <span style="color:#f92672">&amp;&amp;</span> hour <span style="color:#f92672">&lt;</span> 6<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Night&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>hour <span style="color:#f92672">&gt;=</span> 6 <span style="color:#f92672">&amp;&amp;</span> hour <span style="color:#f92672">&lt;</span> 12<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Morning&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>hour <span style="color:#f92672">&gt;=</span> 12 <span style="color:#f92672">&amp;&amp;</span> hour <span style="color:#f92672">&lt;</span> 18<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Afternoon&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Evening&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>这个方法获取了系统的当前时间并返回了对应的时间阶段，看起来挺正常的吧。那这段代码到底有没有问题呢？</p>
<p>我们从单元测试的角度来分析这段代码，我们就会发现，我们不可能为其写出一个基于状态的单元测试。<code>DateTime.now()</code>是一个隐式输入，在程序执行期间或者测试运行期间会产生不同的值。那么，每次对它的调用将产生不同的结果。</p>
<p>如果在不更改系统日期时间的情况下，这种非确定的行为会导致我们没有办法测试此方法。我们试着写出这个单元测试：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getTimeOfDayAt6AMReturnsMorning</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 安装：改变系统时间为：6 AM
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Arrange 阶段不需要动作
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Act
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    String timeOfDay <span style="color:#f92672">=</span> DayTimeService<span style="color:#f92672">.</span><span style="color:#a6e22e">getTimeOfDay</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Assert
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Morning&#34;</span><span style="color:#f92672">,</span> timeOfDay<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 拆卸: 回滚系统时间
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>这样的测试会违背我们在前面讨论的很多规则。首先，它的编写成本很高，因为还需要比较复杂的环境的安装和拆卸。其次，它是不可靠的，可能会因为没有权限修改系统时间导致单测不通过。并且，它不能保证很快的运行。最后，这个测试并不是一个真正意义上的单元测试，因为它需要环境的安装和复原。其实这个单元测试的成本远大于收益，想必你也不会这么做吧。</p>
<p>分析下来，造成代码不可测试的问题是由低质量的 <code>getTimeOfDay()</code> 方法 API 设计引起的。在当前形式下，该方法存在以下几个问题：</p>
<ul>
<li>
<p><strong>和数据源紧密耦合</strong></p>
<p>如果再有一个需求是计算某个日期而非当前系统时间处在的时间阶段，那么该方法是不可重用的，紧耦合是大多数方法出现不可测试性问题的主要根源。</p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Single_responsibility_principle"><strong>违背了单一职责原则(SRP)</strong></a></p>
<p>此方法有多种职责，它消耗信息并处理信息。单一职责原则的定义是一个类或者方法只能有一个引起其改变的原因。从这个角度来看，<code>getTimeOfDay()</code> 方法的影响因素可能是内部逻辑的改变，也可能是日期时间源的改变。</p>
</li>
<li>
<p><strong>对完成任务所需的信息撒谎</strong></p>
<p>对此方法来说，开发人员必须阅读源码，来了解使用了哪些隐式输入以及还要搞清楚这些隐式输入的来源，才能确定此方法是如何输出的。如果仅从方法的名称来看，是不足以理解方法的行为的。</p>
</li>
<li>
<p><strong>很难预测和维护</strong></p>
<p>依赖于可变的全局状态的方法，它的行为不能仅仅通过读取源代码来预测。你必须考虑全局状态的当前值，以及可能改变它的整个事件序列。在一个真正的应用程序当中，理顺这些东西是比较困难的。</p>
</li>
</ul>
<p>在我们重新审视 API 之后，让我们修复它。庆幸的是，我们打破这些紧密的耦合点是非常容易的，相比较讨论它的所有缺陷。</p>
<h4 id="修复方法引入方法参数">修复方法：引入方法参数</h4>
<p>最显而易见并且很容易的修复方法就是，为这个方法引入一个方法参数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">getTimeOfDay</span><span style="color:#f92672">(</span>DateTime time<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> hour <span style="color:#f92672">=</span> DateUtil<span style="color:#f92672">.</span><span style="color:#a6e22e">hour</span><span style="color:#f92672">(</span>time<span style="color:#f92672">,</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>hour <span style="color:#f92672">&gt;=</span> 0 <span style="color:#f92672">&amp;&amp;</span> hour <span style="color:#f92672">&lt;</span> 6<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Night&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>hour <span style="color:#f92672">&gt;=</span> 6 <span style="color:#f92672">&amp;&amp;</span> hour <span style="color:#f92672">&lt;</span> 12<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Morning&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>hour <span style="color:#f92672">&gt;=</span> 12 <span style="color:#f92672">&amp;&amp;</span> hour <span style="color:#f92672">&lt;</span> 18<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Afternoon&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Evening&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>现在这个方法需要调用者提供一个时间参数，而不是在方法内部里面提供这个信息。从单元测试的角度来看，这是非常棒的，因为现在这个方式是确定的 —方法的返回值完全取决于方法的入参，现在基于状态的测试很简单，只需要输入时间参数，并核验返回结果就可以了。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">getTimeOfDayAt6AMReturnsMorning</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Arrange 阶段为空：测试静态方法，不需要初始化
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Act
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  String timeOfDay <span style="color:#f92672">=</span> DayTimeService<span style="color:#f92672">.</span><span style="color:#a6e22e">getTimeOfDay</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> DateTime<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;2015-12-31 06:00:00&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;yyyy-MM-dd HH:mm:ss&#34;</span><span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Assert
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Morning&#34;</span><span style="color:#f92672">,</span> timeOfDay<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>注意，这简单的重构还解决了前面所提到的 API 的问题（包括紧耦合、单一职责的违背、不够清晰和难以理解的 API），它是通过清晰的分离开<em>要处理什么数据</em>和<em>如何处理</em>来做到的。</p>
<p>非常棒！这个方法是可测试的。但是对于其调用者是否友好呢？现在调用者的职责是提供日期时间给到这个方法，意味着如果我们不注意，其调用者也会和刚刚的方法一样将变得不可测试。那就让我们来看看，我们怎么处理。（如果比较难理解，别急，请继续往下看）</p>
<h4 id="修复客户端-api-依赖注入">修复客户端 API ：依赖注入</h4>
<p>现在我们继续研究智能家居系统，并实现了<code>getTimeOfDay</code> 方法的客户端，上述提到的智能家居微控制器代码，它对于灯光的关闭和打开，是基于一天中时间变量和运动的检测来控制的。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SmartHomeController</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> DateTime lastMotionTime<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> DateTime <span style="color:#a6e22e">getLastMotionTime</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> lastMotionTime<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">actuateLights</span><span style="color:#f92672">(</span><span style="color:#66d9ef">boolean</span> motionDetected<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    DateTime time <span style="color:#f92672">=</span> DateTime<span style="color:#f92672">.</span><span style="color:#a6e22e">now</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 更新上次检测时间
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>motionDetected<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      lastMotionTime <span style="color:#f92672">=</span> time<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    String timeOfDay <span style="color:#f92672">=</span> DayTimeService<span style="color:#f92672">.</span><span style="color:#a6e22e">getTimeOfDay</span><span style="color:#f92672">(</span>time<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 如果在 evening 或者 night 检测到有运动，那么打开灯
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>motionDetected <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Evening&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Night&#34;</span><span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			BackyardLightSwitcher<span style="color:#f92672">.</span><span style="color:#a6e22e">INSTANCE</span><span style="color:#f92672">.</span><span style="color:#a6e22e">TurnOn</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 如果1分钟内没有发现任何运动，或者是 morning 或 noon，请关灯
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>DateUtil<span style="color:#f92672">.</span><span style="color:#a6e22e">between</span><span style="color:#f92672">(</span>lastMotionTime<span style="color:#f92672">,</span> time<span style="color:#f92672">,</span> DateUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">MINUTE</span><span style="color:#f92672">)</span> <span style="color:#f92672">&gt;</span> 1
</span></span><span style="display:flex;"><span>             <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Morning&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Noon&#34;</span><span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      BackyardLightSwitcher<span style="color:#f92672">.</span><span style="color:#a6e22e">INSTANCE</span><span style="color:#f92672">.</span><span style="color:#a6e22e">TurnOff</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>哎呦喂！我们又有隐藏输入时间的问题，与前面唯一不同的是，现在是位于更高的抽象级别上。现在我们可以引入另外一个参数，我们可以再一次在方法上增加入参<code>actuateLights(boolean motionDetected, DateTime dateTime)</code>,委托此方法的调用者提供<code>DateTime</code>参数（这个思路和前面的解决思路是一样的）。但是，与其把问题移到在更高一层调用栈上，不如采用另外一种技术，使得方法<code>actuateLights(bool motionDetected)</code>和客户端都有可测试性，这种技术就是<a href="https://en.wikipedia.org/wiki/Inversion_of_control">控制反转</a>或者称为 IOC。</p>
<p>控制反转可以通过多种方式来实现，接下来，我们来看一个特定的示例—使用构造函数进行依赖注入，看看它如何帮助我们进行构建可测试的 SmartHomeController API。</p>
<p>首先，让我们创建一个 <code>IDateTimeProvider</code> 接口，其中包括了一个获取某些日期时间的方法声明：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> <span style="color:#a6e22e">IDateTimeProvider</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    DateTime <span style="color:#a6e22e">getDateTime</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>然后，使<code>SmartHomeController</code>引用<code>IDateTimeProvider</code>实现，并将获取日期时间的职责委派给它：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SmartHomeController</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 依赖
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> IDateTimeProvider dateTimeProvider<span style="color:#f92672">;</span> 
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">SmartHomeController</span><span style="color:#f92672">(</span>IDateTimeProvider dateTimeProvider<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 注入需要的依赖
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">dateTimeProvider</span> <span style="color:#f92672">=</span> dateTimeProvider<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">actuateLights</span><span style="color:#f92672">(</span><span style="color:#66d9ef">boolean</span> motionDetected<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 委托职责
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    DateTime time <span style="color:#f92672">=</span> dateTimeProvider<span style="color:#f92672">.</span><span style="color:#a6e22e">getDateTime</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 其余的灯光控制逻辑在这儿。。。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>现在我们看看为什么叫控制反转：其实是使用什么机制获取日期时间的<em>控制</em>权被反转了，之前是<code>SmartHomeController</code> 本身控制如何获取，而现在控制权给到了<code>SmartHomeController</code>的客户端即使用者。因此，<code>actuateLights(bool motionDetected)</code>方法的执行完全依赖于两个可以从外部轻松管理的东西：一个是<code>motionDetected</code>参数，另一个是传递到<code>SmartHomeController</code>构造函数的<code>IDateTimeProvider</code>的具体实现。</p>
<p>为什么这样做对单元测试很重要呢？因为这样我们就可以在生产环境代码和单元测试代码使用不同的<code>IDateTimeProvider</code>的实现。在生产环境中，可以注入真实的实现（比如，注入一个读取真实系统时间的实现）。在单测中，我们可以注入一个“伪”实现，返回一个适合测试特定场景的常量或者预定义的<code>DateTime</code>值。</p>
<p><code>IDateTimeProvider</code>的一个伪实现如下所示：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FakeDateTimeProvider</span> <span style="color:#66d9ef">implements</span> IDateTimeProvider<span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">private</span> DateTime returnValue<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#a6e22e">FakeDateTimeProvider</span><span style="color:#f92672">(</span>DateTime returnValue<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">returnValue</span> <span style="color:#f92672">=</span> returnValue
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> DateTime <span style="color:#a6e22e">getDateTime</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> returnValue<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> DateTime <span style="color:#a6e22e">getReturnValue</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> returnValue<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">setReturnValue</span><span style="color:#f92672">(</span>DateTime returnValue<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">returnValue</span> <span style="color:#f92672">=</span> returnValue<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>在这个类的帮助下，可以将<code>SmartHomeController</code>和不确定性因素隔离开来，并执行基于状态的单元测试。让我们验证一下，如果检测到运动，该运动的时间是否会被记录在<code>LastMotionTime</code>属性中：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">actuateLightsMotionDetectedSavesTimeOfMotion</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Arrange
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  DateTime time <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> DateTime<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;2015-12-31 23:59:59&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;yyyy-MM-dd HH:mm:ss&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	SmartHomeController controller <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SmartHomeController<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> FakeDateTimeProvider<span style="color:#f92672">(</span>time<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Act
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	controller<span style="color:#f92672">.</span><span style="color:#a6e22e">actuateLights</span><span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Assert
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertEquals</span><span style="color:#f92672">(</span>time<span style="color:#f92672">,</span> controller<span style="color:#f92672">.</span><span style="color:#a6e22e">getLastMotionTime</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>太棒了！像这样的单元测试在重构前是不可能的做到的。既然我们已经去除了不确定因素的影响并验证了基于状态的场景测试，那么现在你认为<code>SmartHomeController</code>是完全可测试的了吗?</p>
<h3 id="毒害代码库的因素之副作用">毒害代码库的因素之副作用</h3>
<p>尽管我们解决了隐式输入的不确定因素问题，并且我们能够测试某些功能，但是代码仍然是不稳定的，至少一部分代码是这样的。</p>
<p>让我们 review 下方法<code>ActuateLights(bool motionDetected)</code>中负责打开或者关闭灯光的代码部分：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>	<span style="color:#75715e">// 如果在 evening 或者 night 检测到有运动，那么打开灯
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>motionDetected <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Evening&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Night&#34;</span><span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    BackyardLightSwitcher<span style="color:#f92672">.</span><span style="color:#a6e22e">INSTANCE</span><span style="color:#f92672">.</span><span style="color:#a6e22e">TurnOn</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 如果1分钟内没有发现任何运动，或者是 morning 或 noon，请关灯
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>DateUtil<span style="color:#f92672">.</span><span style="color:#a6e22e">between</span><span style="color:#f92672">(</span>lastMotionTime<span style="color:#f92672">,</span> time<span style="color:#f92672">,</span> DateUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">MINUTE</span><span style="color:#f92672">)</span> <span style="color:#f92672">&gt;</span> 1
</span></span><span style="display:flex;"><span>         <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Morning&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Noon&#34;</span><span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	BackyardLightSwitcher<span style="color:#f92672">.</span><span style="color:#a6e22e">INSTANCE</span><span style="color:#f92672">.</span><span style="color:#a6e22e">TurnOff</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>我们看到，<code>SmartHomeController</code>委托了开关灯的职责给到<code>BackyardLightSwitcher</code>对象，这个对象还是单例模式。但是这个设计有什么问题呢？</p>
<p>为了对方法<code>ActuateLights(bool motionDetected)</code>进行全面的单元测试，我们不仅要做基于状态的测试，还要做基于交互的测试，也就是说，我们应该确保只有在满足适当的条件时，才会调用用于打开或关闭灯光的方法。但是当前的设计，不允许我们这样做：<code>BackyardLightSwitcher</code>的<code>TurnOn()</code>和<code>TurnOff()</code>方法会触发系统中一些状态的更改，或者换句话说，会产生副作用（灯的开关）。验证开关的灯方法被调用的唯一方式是检查它们相应的副作用是否真的发生了，这样的验证会很痛苦。</p>
<p>的确，让我们假设运动传感器、后院灯和智能家居微控制器都连接到了物联网的网络中，并使用某种无线协议可以进行网络通信。在这种情况下，如果想做到上面的单元测试，我们可以尝试在单测中接受和分析网络流量，从而来核验测试结果。或者，各个硬件组件用导线连接起来，单元测试可以检查电压是否施加到对应的电路上。或者，还可以使用额外的光传感器来检查灯是否是真的打开或者关闭来进行核验。</p>
<p>正如我们所看到的，单元测试具有副作用的方法和单元测试具有不确定性的方法，这两者一样困难，甚至是不可能的。任何的尝试会导致我们之前看到的类似的问题。这个测试将变得很难实现、不可靠，还可能很慢，而且也可能不是一个真正的单元。还有，运行测试套件引起的灯光的闪烁也会让人发疯。</p>
<p>同样，所有这些可测试性问题都是由糟糕的 API 设计引起的，并不是开发人员编写单元测试的能力。无论灯的控制是怎么实现的，<code>SmartHomeController</code> API 都会遇到以下常见的问题：</p>
<ul>
<li>
<p><strong>和实现紧密耦合</strong></p>
<p>API 依赖于 <code>BackyardLightSwitcher</code> 硬编码的具体实现。现有方法 <code>ActuateLights(bool motionDetected)</code> 无法做到切换后院以外的任何灯光，它是不可重用的。</p>
</li>
<li>
<p><strong>违背了单一职责原则</strong></p>
<p>这个 API 有两个引起其改变的原因：第一，内部逻辑的改变（例如选择只在 night 开灯，而不是在 evening 打开）；第二，如果灯开关机制被另一机制取代。</p>
</li>
<li>
<p><strong>依赖关系上不清晰</strong></p>
<p>如果开发人员不深入研究源代码，那么他们是没有办法知道<code>SmartHomeController</code>是依赖于硬编码<code>BackyardLightSwitcher</code>。</p>
</li>
<li>
<p><strong>很难理解和维护</strong></p>
<p>如果条件是正确的，但是却无法打开灯光，那该怎么办呢？我们会花很多没用的时间去尝试修复<code>SmartHomeController</code>，但最终却发现问题是由<code>BackyardLightSwitcher</code>（或者，更有趣的是，灯泡烧坏了）中的一个错误引起的。</p>
</li>
</ul>
<p>解决可测试性和低质量 API 问题的方法是将紧密耦合的组件彼此分离。与前面的例子一样，使用依赖注入可以解决这类问题。只需向<code>SmartHomeController</code>添加一个<code>ILightSwitcher</code>的依赖项，将控制灯开关的责任委派给它，并传递一个假的、仅测试的<code>ILightSwitcher</code>的实现，该实现将记录是否在正确的条件下调用了适当的方法。与其再用一次依赖注入，不如让我们回顾一种有趣的分离责任的替代方式。</p>
<h4 id="修复-api高阶函数httpszhwikipediaorgwikie9ab98e998b6e587bde695b0">修复 API：<a href="https://zh.wikipedia.org/wiki/%E9%AB%98%E9%98%B6%E5%87%BD%E6%95%B0">高阶函数</a></h4>
<p>这种方法是任何支持<a href="https://zh.wikipedia.org/wiki/%E5%A4%B4%E7%AD%89%E5%87%BD%E6%95%B0">头等函数</a>的面向对象语言中的一种选择。让我们利用 Java 的函数特性，让<code>actuateLights(boolean motionDetected)</code> 方法再接受两个参数：一对操作委托，指向应该调用打开或者关闭指示灯的方法。这种解决方法会将函数转化成为一个高阶函数：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">actuateLights</span><span style="color:#f92672">(</span><span style="color:#66d9ef">boolean</span> motionDetected<span style="color:#f92672">,</span> Runnable turnOn<span style="color:#f92672">,</span> Runnable turnOff<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  DateTime time <span style="color:#f92672">=</span> dateTimeProvider<span style="color:#f92672">.</span><span style="color:#a6e22e">getDateTime</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 更新上次检测时间
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>motionDetected<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    lastMotionTime <span style="color:#f92672">=</span> time<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  String timeOfDay <span style="color:#f92672">=</span> DayTimeService<span style="color:#f92672">.</span><span style="color:#a6e22e">getTimeOfDay</span><span style="color:#f92672">(</span>time<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 如果在 evening 或者 night 检测到有运动，那么打开灯
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>motionDetected <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Evening&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Night&#34;</span><span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 调用一个委托 不再紧耦合
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    turnOn<span style="color:#f92672">.</span><span style="color:#a6e22e">run</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// 如果1分钟内没有发现任何运动，或者是 morning 或 noon，请关灯
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>DateUtil<span style="color:#f92672">.</span><span style="color:#a6e22e">between</span><span style="color:#f92672">(</span>lastMotionTime<span style="color:#f92672">,</span> time<span style="color:#f92672">,</span> DateUnit<span style="color:#f92672">.</span><span style="color:#a6e22e">MINUTE</span><span style="color:#f92672">)</span> <span style="color:#f92672">&gt;</span> 1
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">||</span> <span style="color:#f92672">(</span>timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Morning&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">||</span> timeOfDay<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Noon&#34;</span><span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 调用一个委托 不再紧耦合
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    turnOff<span style="color:#f92672">.</span><span style="color:#a6e22e">run</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>相比较之前见过的典型的面向对象依赖注入的方式，这是一个更具功能性的解决方案；它让我们用更少的代码和多一点的表达式来实现相同的结果。我们不再需要声明一个接口并实现来提供<code>SmartHomeController</code>所需的功能，现在我们只需要传递函数的定义。高阶函数可以视为实现控制反转的另一种方式。</p>
<p>现在我们做一个基于交互的单元测试，我们可以将易于验证的伪操作传递到控制器中：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Test</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">actuateLightsMotionDetectedAtNightTurnsOnTheLight</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Arrange 创建一对操作实现开关灯，用一个标识表示灯的状态，并不是真正的打开或者关闭灯
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	AtomicBoolean turnedOn <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> AtomicBoolean<span style="color:#f92672">(</span><span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	Runnable turnOn <span style="color:#f92672">=</span> <span style="color:#f92672">()</span> <span style="color:#f92672">-&gt;</span> turnedOn<span style="color:#f92672">.</span><span style="color:#a6e22e">set</span><span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	Runnable turnOff <span style="color:#f92672">=</span> <span style="color:#f92672">()-&gt;</span> turnedOn<span style="color:#f92672">.</span><span style="color:#a6e22e">set</span><span style="color:#f92672">(</span><span style="color:#66d9ef">false</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>	DateTime time <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> DateTime<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;2015-12-31 23:59:59&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;yyyy-MM-dd HH:mm:ss&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	SmartHomeController controller <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> SmartHomeController<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> FakeDateTimeProvider<span style="color:#f92672">(</span>time<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Act
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  controller<span style="color:#f92672">.</span><span style="color:#a6e22e">actuateLights</span><span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">,</span> turnOn<span style="color:#f92672">,</span> turnOff<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Assert
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">assertTrue</span><span style="color:#f92672">(</span>turnedOn<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>最终，我们把<code>SmartHomeController</code> API 变得完全可测试，并且我们既可以对它做基于状态的测试也可以做基于交互的测试。同样，请注意，除了改进了其可测试性之外，我们也解耦了方法中的决策层代码和动作代码，以致于这个 API 变得更加干净并且可重用。</p>
<p>现在来看，为了实现完整的单测覆盖，我们可以很轻松的实现一系列类似的测试来验证所有可能出现的情况，这不是什么大不了的事情，因为这些单测很容易实现。</p>
<h2 id="杂质和可测试性">杂质和可测试性</h2>
<p>不受控制的不确定性和副作用对代码库的破坏性是相似的。如果不小心使用，它们会导致具有欺骗性的、难以理解和维护的、紧密耦合的、不可重用的和不稳定的代码。</p>
<p>相反，既具有确定性又无副作用的方法是更易于测试、推理和重用的，以致于可以轻松构建更大的程序。在函数式编程中，这种方法称为<a href="https://en.wikipedia.org/wiki/Pure_function">纯函数</a>。我们很少在单元测试纯函数时遇到问题；我们所要做的就是传递一些参数并检查结果的正确性。真正使代码不稳定的是那些硬编码和杂质性的因素，它们不能被替换、重写或者以其他方式抽象掉。</p>
<p>杂质是有毒的：如果方法<code>Foo()</code>依赖于不确定或者有副作用的方法<code>Bar()</code>，那么<code>Foo()</code>也会变得不确定或有副作用。最终，我们可能会毒害整个代码库。如果将所有这些问题乘以一个复杂的实际应用程序的大小，那么复杂度会变得好高，我们将会被一个非常难以维护的代码库所困住，其中充满了各种坏气味、反模式、隐式依赖以及各种丑陋和令人不愉快的东西。</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200929142351748.png" alt="code"></p>
<p>然而，杂质是不可避免的。任何真实的应用一定会在某个时刻，通过和环境、数据库、配置文件、网络服务或者其他外部的系统交互，来读取和操作状态。因此，与其完全消除这些杂质，不如限制这些因素，避免让它们毒害你的代码库，并尽可能打破硬编码的依赖关系，以便能够独立地分析和进行单元测试。</p>
<h2 id="难以测试代码的常见警告标志">难以测试代码的常见警告标志</h2>
<p>现在看来写单测还是困难吗？其实我们也看到了，问题不是你的测试套件，而是你的代码。</p>
<p>最后，让我们回顾一些常见的警告标志，这些标志表明我们的代码可能很难测试。</p>
<h3 id="静态属性和字段">静态属性和字段</h3>
<p>静态属性和字段，或者简单的说，全局状态，它们通过隐藏了方法所需要的信息，引入了非确定性，或者推动了副作用的广泛使用，可能会复杂化代码的理解和可测试性。读取或者修改可变全局状态的函数本质上是不纯洁的。</p>
<p>例如，很难对以下代码进行推理，这些代码依赖于全局可访问的属性：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (!SmartHomeSettings.CostSavingEnabled) {
</span></span><span style="display:flex;"><span>  _swimmingPoolController.HeatWater(); 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>如果<code> HeatWater()</code>方法在某个场景，我们确定应该被调用却没有被调用，这时我们该怎么办？因为在应用中任何部分都有可能改变<code>CostSavingEnabled</code>的值，所以我们为了弄清楚是哪里出错了，必须找到并分析所有可以改变此值的地方。此外，正如我们已经看到的，为了测试目的，我们不可能设置这些静态属性（例如<code>DateTime.Now</code>, or <code>Environment.MachineName</code>；它们虽然是只读的，但仍然不确定）。</p>
<p>相反地，不可变的和确定性的全局状态是完全 OK 的。事实上，它有一个更熟悉的名字 - 常量。常量值，例如<code>Math.PI</code>不会引入任何非确定性，并且其值是不能被改变的，因此不允许任何副作用。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#75715e">// 仍然是一个纯洁的函数</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">double</span> Circumference(<span style="color:#66d9ef">double</span> radius) { 
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">2</span> * Math.PI * radius; 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="单例">单例</h3>
<p>从本质上讲，单例模式只是全局状态的另一种形式。单例提升了 API 的模糊性，这些 API 掩盖了真正的依赖关系，并在组件间引入了不必要的紧密耦合。此外，它们还违反了单一责任原则，因为除了它负责的主要职责之外，它们还控制了自己的初始化和生命周期。</p>
<p>单例程序很轻易地使单元测试依赖代码顺序，因为它们在整个应用程序或单元测试套件的生命周期中都携带了状态。请看以下示例：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span>User GetUser(<span style="color:#66d9ef">int</span> userId)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    User user;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (UserCache.Instance.ContainsKey(userId))
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        user = UserCache.Instance[userId];
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        user = _userService.LoadUser(userId);
</span></span><span style="display:flex;"><span>        UserCache.Instance[userId] = user;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> user;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>在上面的示例中，如果首先测试缓存命中的场景，那么会事先向缓存中添加一个新用户，因此缓存未命中场景的后续测试可能会失败，因为它假定缓存为空。为了克服这个问题，我们必须在每次单元测试运行之后编写额外的<code>teardown</code>代码来清理 UserCache。</p>
<p>在大多数情况下，使用 Singleton 是一种不好的做法，可以（也应该）避免；但是，区分作为设计模式的<code>Singleton</code> 和对象的单个实例是很重要的。在后一种情况下，创建和维护单个实例的责任在于应用程序本身。通常，这是一个工厂或依赖注入容器，它在应用程序的<code>top</code>附近（即靠近应用程序入口点）创建一个实例，然后将其传递给每个需要它的对象。从可测试性和 API 质量的角度来看，这种方法是绝对正确的。</p>
<h3 id="new的操作"><code>new</code>的操作</h3>
<p>为了完成某些工作而创建一个对象的实例会带来和 Singleton 反模式相同的问题：造成 API 的不清晰，其中具有隐藏的依赖关系、紧密的耦合度和较差的可测试性。</p>
<p>例如，为了测试当返回404状态代码时，以下循环是否停止，开发人员应设置一个测试web服务器：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">using</span> (<span style="color:#66d9ef">var</span> client = <span style="color:#66d9ef">new</span> HttpClient())
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    HttpResponseMessage response;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">do</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        response = <span style="color:#66d9ef">await</span> client.GetAsync(uri);
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Process the response and update the uri...</span>
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">while</span> (response.StatusCode != HttpStatusCode.NotFound);
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>然而，<code>new</code>有时候是完全无害的：例如，创建一个简单的实体类对象完全 OK：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">var</span> person = <span style="color:#66d9ef">new</span> Person(<span style="color:#e6db74">&#34;John&#34;</span>, <span style="color:#e6db74">&#34;Doe&#34;</span>, <span style="color:#66d9ef">new</span> DateTime(<span style="color:#ae81ff">1970</span>, <span style="color:#ae81ff">12</span>, <span style="color:#ae81ff">31</span>));
</span></span></code></pre></div><p>其实创建一个不产生任何副作用的小的临时的对象也是可以的，除非需要修改它们自己的状态，并且基于该状态返回结果。在下面的示例中，我们不关心是否调用了<code>Stack</code>方法—我们只检查最终结果是否正确：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">string</span> ReverseString(<span style="color:#66d9ef">string</span> input)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// No need to do interaction-based testing and check that Stack methods were called or not;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// The unit test just needs to ensure that the return value is correct (state-based testing).</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">var</span> stack = <span style="color:#66d9ef">new</span> Stack&lt;<span style="color:#66d9ef">char</span>&gt;();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">foreach</span>(<span style="color:#66d9ef">var</span> s <span style="color:#66d9ef">in</span> input)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        stack.Push(s);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">string</span> result = <span style="color:#66d9ef">string</span>.Empty;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span>(stack.Count != <span style="color:#ae81ff">0</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        result += stack.Pop();
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> result;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h3 id="静态方法">静态方法</h3>
<p>静态方法是不确定性或者副作用行为的另一个潜在来源。它们很容易引入紧耦合，使我们的代码不稳定。</p>
<p>例如，要验证以下方法的行为，单元测试必须操作环境变量并读取控制台输出流，以确保打印了适当的数据：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">void</span> CheckPathEnvironmentVariable()
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (Environment.GetEnvironmentVariable(<span style="color:#e6db74">&#34;PATH&#34;</span>) != <span style="color:#66d9ef">null</span>)
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>        Console.WriteLine(<span style="color:#e6db74">&#34;PATH environment variable exists.&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">else</span>
</span></span><span style="display:flex;"><span>    {
</span></span><span style="display:flex;"><span>       Console.WriteLine(<span style="color:#e6db74">&#34;PATH environment variable is not defined.&#34;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>但是，干净的静态函数是被允许的：因为它们的任何组合仍然是干净的函数。例如：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c#" data-lang="c#"><span style="display:flex;"><span><span style="color:#66d9ef">double</span> Hypotenuse(<span style="color:#66d9ef">double</span> side1, <span style="color:#66d9ef">double</span> side2) { 
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> Math.Sqrt(Math.Pow(side1, <span style="color:#ae81ff">2</span>) + Math.Pow(side2, <span style="color:#ae81ff">2</span>)); 
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="单元测试的好处">单元测试的好处</h2>
<p>显然，编写可测试代码需要一定的纪律性、专注力和额外的努力。我们尽管在软件开发中会存在复杂的心理活动，但是也应该时刻小心，避免鲁莽地从头就开始盲目的堆砌代码。</p>
<p>如果我们保证了软件的开发质量，那么我们最终会得到干净的、易于维护的、低耦合的和可重用的 API， 当开发人员理解这些 API 的时候，以致于不会让他们头疼。毕竟，可测试性代码的最终优势不止在于其本身的可测试，更给代码带来了易理解、易维护和易扩展的优点。</p>
<h2 id="后记">后记</h2>
<p>原文作者讨论了 API 的设计对单元测试的影响，以及该怎么去做好 API 设计和单元测试。这篇文章作者讲的很详细，让我也大致理解了之前听到过的“面向测试编程”的说法。在时间允许的情况下，我们就把单元测试编写起来吧，毕竟好处大大的，同时，还能修整你的代码库。</p>
<p><em>英文原文链接：https://www.toptal.com/qa/how-to-write-testable-code-and-why-it-matters</em></p>]]></content>
        </item>
        
        <item>
            <title>SpringBoot-Oauth2.0（三） —— Token 的存储方案</title>
            <link>https://goldpumpkin.life/posts/2020/09/springboot-oauth2.0%E4%B8%89-token-%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/</link>
            <pubDate>Tue, 01 Sep 2020 00:00:00 +0000</pubDate>
            
            <guid>https://goldpumpkin.life/posts/2020/09/springboot-oauth2.0%E4%B8%89-token-%E7%9A%84%E5%AD%98%E5%82%A8%E6%96%B9%E6%A1%88/</guid>
            <description>&lt;p&gt;上一篇，我们把 Token 放到了关系型数据库当中存储，如果你的系统对认证接口响应时间要求很高，那么在关系型数据库中，查询 Token，一定会是一个瓶颈。那么怎么办呢？如果仅从存储 Token 方面考虑，有什么可以替代关系型数据的存储呢？&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>上一篇，我们把 Token 放到了关系型数据库当中存储，如果你的系统对认证接口响应时间要求很高，那么在关系型数据库中，查询 Token，一定会是一个瓶颈。那么怎么办呢？如果仅从存储 Token 方面考虑，有什么可以替代关系型数据的存储呢？</p>
<h2 id="token-存储的分析">Token 存储的分析</h2>
<p>第一，一般关系型数据库中的数据会存放于磁盘当中的，时间主要消耗于 IO 操作。那我们把 Token 放到内存中就可以解决 IO 问题，顺便也减少了对数据库的网络请求，而在 SpringBoot Oauth 框架中默认就是存储就是在内存当中的。</p>
<p>第二，第一种方案是有缺陷的，现在大多是应用都是分布式架构，把 Token 存放于一台实例的内存，是非常不合理的。这时候需要一个性能很高的中间介质来替代关系型数据库，<a href="https://redis.io/topics/introduction">Redis</a> 就是一个很好的选择。一方面是因为 Redis 是基于内存操作的，性能非常出色；另一方面，Redis 可以设置过期时间， 正好符合 Token 定时过期的特性。</p>
<p>第三，还有没有其他方案呢？我们从另一个角度想想，我们为什么要存储 Token 呢？ 因为 Token 是系统发放的，是允许客户端访问系统的一种授权凭证，当客户端携带 Token 请求资源的时候，系统是需要验证 Token 是合法授权的，才允许客户端可以访问相关资源。那么我们是不是也可以这样理解，只要系统能够验证授权的 Token ，不存起来也是可以的。其实有一种 Token 可以做到不存储， token 本身就带有授权信息，系统只需要在内存中用对应的算法就可以验证 Token 是不是合法授权的 ，这种方式就是用 <a href="https://en.wikipedia.org/wiki/JSON_Web_Token">JWT</a> 。</p>
<blockquote>
<p><strong>JWT是什么？</strong></p>
<p>JSON Web Token(JWT)，是一种认证解决方案，客户端和服务器用 JWT 规定格式的 Token 进行身份认证交互。JWT 的格式分为三段，每段之间用「.」做间隔，并且每段包含了不同的信息，当然作用也不同。分别是：</p>
<p><strong>Header - 头部</strong>
数据格式：JSON 数据经过 Base64URL 编码
信息：指定了加密类型及 Type 为 JWT</p>
<p><strong>Payload - 负载</strong>
数据格式：JSON 数据经过 Base64URL 编码
信息：Client 的授权信息等</p>
<p><strong>Signature - 签名</strong>
说明：前两部分和约定好的秘钥经过指定加密算法生成，也叫<a href="https://zh.wikipedia.org/wiki/%E8%A8%8A%E6%81%AF%E9%91%91%E5%88%A5%E7%A2%BC">信息验证码 MAC </a>，防止数据篡改</p>
</blockquote>
<p>以上我们提出了3种方案，来替代数据库存储 Token 。其中，第一种在第一篇文章中已经实践过了。那接下来，我们分别实践一下另外两种方案。</p>
<h2 id="token-存储到-redis">Token 存储到 Redis</h2>
<h3 id="pom">Pom</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>    <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;artifactId&gt;</span>spring-boot-starter-data-redis<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h3 id="配置">配置</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">spring</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">redis</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">host</span>: {<span style="color:#ae81ff">redis host}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">password</span>: {<span style="color:#ae81ff">redis password}</span>
</span></span></code></pre></div><h3 id="请求-token">请求 Token</h3>
<p><img src="http://qiniu.5ires.top/uPic/image-20200903180205938.png" alt="redis-请求token"></p>
<h3 id="redis-中的-token-数据">Redis 中的 Token 数据</h3>
<p><img src="http://qiniu.5ires.top/uPic/image-20200903180425965.png" alt="redis-存储token"></p>
<p>可以看出数据库新增了4个 Key ，那他们的 Value 是什么呢？直接看数据，都是二进制数据，看不出来。那我们回到源码去找答案。找到类 OAuth2Authentication 的 storeAccessToken 方法，可以看出除了 Key 为 auth:token 的 Value 是OAuth2Authentication 实例的序列化二进制数据外，其他 Key 的 Value 都是 Token 对应的二进制数据。</p>
<p>那现在 Token 已经存到了我们预期的 Redis 当中了，最后再请求下资源，看是否可以通过，完整的验证下。</p>
<h3 id="请求资源">请求资源</h3>
<p><img src="http://qiniu.5ires.top/uPic/image-20200903182015962.png" alt="redis-请求资源"></p>
<p>毫不意外和惊喜的接受预期的结果吧。</p>
<p>现在我们已经实现了把 Token 存储到 Redis 当中，其实和存储到数据库中的做法很像，更换 TokenStore 就好了。那我们继续实践下 JWT 方案吧。</p>
<h2 id="jwt">JWT</h2>
<h3 id="pom-1">Pom</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>    <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.security<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;artifactId&gt;</span>spring-security-jwt<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h3 id="配置-1">配置</h3>
<p>上面已经简单介绍过 JWT ，其中和配置相关我们要注意的是，我们需要约定一个秘钥并且指定 JWT 对应的算法。JWT 默认的算法是 HMACSHA256 ，在框架找到对应的验证器 <code>MacSigner</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 配置jwt相关
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 省略了一部分代码
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">**/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EnableAuthorizationServer</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyAuthorizationServerConfigurer</span> <span style="color:#66d9ef">extends</span> AuthorizationServerConfigurerAdapter <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// 指定加密秘钥
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#a6e22e">@Value</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;${jwt.key:GoLdJwtKey}&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> String tokenSecretKey<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>AuthorizationServerEndpointsConfigurer endpoints<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#75715e">// 指定 token 转化器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        JwtAccessTokenConverter jwtAccessTokenConverter <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JwtAccessTokenConverter<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 设置加签秘钥
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        jwtAccessTokenConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">setSigningKey</span><span style="color:#f92672">(</span>tokenSecretKey<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 设置信息验证码校验器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        jwtAccessTokenConverter<span style="color:#f92672">.</span><span style="color:#a6e22e">setVerifier</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> MacSigner<span style="color:#f92672">(</span>tokenSecretKey<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        TokenStore tokenStore <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> JwtTokenStore<span style="color:#f92672">(</span>jwtAccessTokenConverter<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        endpoints<span style="color:#f92672">.</span><span style="color:#a6e22e">accessTokenConverter</span><span style="color:#f92672">(</span>jwtAccessTokenConverter<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        endpoints<span style="color:#f92672">.</span><span style="color:#a6e22e">tokenStore</span><span style="color:#f92672">(</span>tokenStore<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="获取-token">获取 Token</h3>
<p><img src="http://qiniu.5ires.top/uPic/image-20200904114623764.png" alt="jwt-获取token"></p>
<p>这个 Token 也太长了吧，完整 Token 如下：</p>
<pre tabindex="0"><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOlsicmVzIl0sInNjb3BlIjpbIndyaXRlIl0sImV4cCI6MTU5OTIzNDM1OSwianRpIjoiYjQ2NmVkNDEtNWI1Ni00NDc2LWE4ZjctYjEwYjQ0MTFhNTViIiwiY2xpZW50X2lkIjoiZ29sZCJ9.P-510ioyW4mfjS_UFlCREqnCail2GfMHFx4Mc2Jjf4Q
</code></pre><p>来一起看下这个 Token，确实有三段，前两段可以直接用 Base64URL 解码。那我们直接到 <a href="https://jwt.io/">JWT 官网</a>解码一下：</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200904115142148.png" alt="jwt-decode"></p>
<p>信息如图所示，看到了客户端的相关信息，这也是我们想要的 Token 本身已经承载了 Client 的相关授权信息。接下来继续完成我们的验证，请求一下资源看结果。</p>
<h3 id="请求资源-1">请求资源</h3>
<p><img src="http://qiniu.5ires.top/uPic/image-20200904115634873.png" alt="jwt-请求资源"></p>
<p>很顺利，我们请求资源成功了。</p>
<h2 id="总结">总结</h2>
<p>今天我们的目的就是寻找替代数据库存储 Token 的方案，分析之后找出了3种方案，并分别进行了实践。如果你的应用是单机，那么 Token 直接用内存就可以，很方便。如果你的应用是分布式的，那么关系型数据库是一种选择，如果对性能要求很高，那就上 Redis 吧。不过 JWT 方案性能也很高，还不要存储，只是暴露了一些授权信息，你可以把 Token 生效时间控制一下，因为它颁发后就无法在服务器侧失效，生产用它也没有太大问题。具体情况具体分析后，再选择合适的方式存储 Token 吧。</p>
<p><strong>个人水平有限，欢迎大家指正，欢迎关注微信公众号「小黄的笔记」一起交流哦~~~</strong>
<img src="http://qiniu.5ires.top/uPic/1598968637527.jpg" alt="小黄的笔记"></p>
<p><strong>demo：https://github.com/goldpumpkin/learn-demo/tree/master/springboot-oauth</strong></p>]]></content>
        </item>
        
        <item>
            <title>SpringBoot-Oauth2.0（二）—— client 及 token 存放到数据库</title>
            <link>https://goldpumpkin.life/posts/2020/08/springboot-oauth2.0%E4%BA%8C-client-%E5%8F%8A-token-%E5%AD%98%E6%94%BE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
            <pubDate>Mon, 31 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://goldpumpkin.life/posts/2020/08/springboot-oauth2.0%E4%BA%8C-client-%E5%8F%8A-token-%E5%AD%98%E6%94%BE%E5%88%B0%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
            <description>&lt;p&gt;&lt;a href=&#34;https://juejin.im/post/6865971696017833997&#34;&gt;上一篇&lt;/a&gt;我们已经用最简单的方式，搭建了一个授权方式是 client_credentials 的 Oauth2 的流程。那么现在，在此基础上，我们就再往前迈一步，我们把 client 信息和 token 存储到数据库当中，方便我们管理。并且密码需要保证安全，那么就需要加密。目标很明确，那我们开始吧！&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p><a href="https://juejin.im/post/6865971696017833997">上一篇</a>我们已经用最简单的方式，搭建了一个授权方式是 client_credentials 的 Oauth2 的流程。那么现在，在此基础上，我们就再往前迈一步，我们把 client 信息和 token 存储到数据库当中，方便我们管理。并且密码需要保证安全，那么就需要加密。目标很明确，那我们开始吧！</p>
<h2 id="clienttoken存储到数据库">client&amp;token存储到数据库</h2>
<h3 id="步骤">步骤：</h3>
<ol>
<li>数据库准备：只创建我们需要用到的表</li>
<li>添加数据库相关依赖：使用 mysql 数据库</li>
<li>Oauth 存储配置的设置</li>
<li>验证</li>
</ol>
<h3 id="数据库准备">数据库准备</h3>
<p>在本地数据库，创建两张表：</p>
<ul>
<li>一张表存储 client 相关信息</li>
<li>另一张表存储 token</li>
</ul>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#f92672">#</span> client <span style="color:#960050;background-color:#1e0010">相关信息</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> oauth_client_details
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    client_id               VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;必填，Oauth2 client_id&#39;</span>,
</span></span><span style="display:flex;"><span>    resource_ids            VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;可选，资源id集合，多个资源用英文逗号隔开&#39;</span>,
</span></span><span style="display:flex;"><span>    client_secret           VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;必填，Oauth2 client_secret&#39;</span>,
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">scope</span>                   VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;必填，Oauth2 权限范围，比如 read，write等可自定义&#39;</span>,
</span></span><span style="display:flex;"><span>    authorized_grant_types  VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;必填，Oauth2 授权类型，支持类型：authorization_code,password,refresh_token,implicit,client_credentials，多个用英文逗号隔开&#39;</span>,
</span></span><span style="display:flex;"><span>    web_server_redirect_uri VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;可选，客户端的重定向URI,当grant_type为authorization_code或implicit时,此字段是需要的&#39;</span>,
</span></span><span style="display:flex;"><span>    authorities             VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;可选，指定客户端所拥有的Spring Security的权限值&#39;</span>,
</span></span><span style="display:flex;"><span>    access_token_validity   INTEGER <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;可选，access_token的有效时间值(单位:秒)，不填写框架(类refreshTokenValiditySeconds)默认12小时&#39;</span>,
</span></span><span style="display:flex;"><span>    refresh_token_validity  INTEGER <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;可选，refresh_token的有效时间值(单位:秒)，不填写框架(类refreshTokenValiditySeconds)默认30天&#39;</span>,
</span></span><span style="display:flex;"><span>    additional_information  VARCHAR(<span style="color:#ae81ff">4096</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;预留字段，格式必须是json&#39;</span>,
</span></span><span style="display:flex;"><span>    autoapprove             VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;该字段适用于grant_type=&#34;authorization_code&#34;的情况下，用户是否自动approve操作&#39;</span>
</span></span><span style="display:flex;"><span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">#</span> token <span style="color:#960050;background-color:#1e0010">存储</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">create</span> <span style="color:#66d9ef">table</span> oauth_access_token
</span></span><span style="display:flex;"><span>(
</span></span><span style="display:flex;"><span>    token_id          VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;MD5加密后存储的access_token&#39;</span>,
</span></span><span style="display:flex;"><span>    token             BLOB <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;access_token序列化的二进制数据格式&#39;</span>,
</span></span><span style="display:flex;"><span>    authentication_id VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">PRIMARY</span> <span style="color:#66d9ef">KEY</span> <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;主键，其值是根据当前的username(如果有),client_id与scope通过MD5加密生成的,具体实现参见DefaultAuthenticationKeyGenerator&#39;</span>,
</span></span><span style="display:flex;"><span>    user_name         VARCHAR(<span style="color:#ae81ff">256</span>),
</span></span><span style="display:flex;"><span>    client_id         VARCHAR(<span style="color:#ae81ff">256</span>),
</span></span><span style="display:flex;"><span>    authentication    BLOB <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;将OAuth2Authentication对象序列化后的二进制数据&#39;</span>,
</span></span><span style="display:flex;"><span>    refresh_token     VARCHAR(<span style="color:#ae81ff">256</span>) <span style="color:#66d9ef">comment</span> <span style="color:#e6db74">&#39;refresh_token的MD5加密后的数据&#39;</span>
</span></span><span style="display:flex;"><span>);
</span></span></code></pre></div><p>之后，我们需要添加自定义 client 信息。本次演示添加的 client 信息如下（依旧本着尽量能不配置就不配置的原则）：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-sql" data-lang="sql"><span style="display:flex;"><span><span style="color:#66d9ef">INSERT</span> <span style="color:#66d9ef">INTO</span> oauth_client_details (client_id, resource_ids, client_secret, <span style="color:#66d9ef">scope</span>, authorized_grant_types, web_server_redirect_uri, authorities, access_token_validity, refresh_token_validity, additional_information, autoapprove) <span style="color:#66d9ef">VALUES</span> (<span style="color:#e6db74">&#39;gold&#39;</span>, <span style="color:#e6db74">&#39;res&#39;</span>, <span style="color:#e6db74">&#39;{noop}123456&#39;</span>, <span style="color:#e6db74">&#39;write&#39;</span>, <span style="color:#e6db74">&#39;client_credentials&#39;</span>, <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">null</span>);
</span></span></code></pre></div><blockquote>
<p>说明</p>
<ol>
<li>在官方给出的源码当中，是有对应的 <a href="https://github.com/spring-projects/spring-security-oauth/blob/master/spring-security-oauth2/src/test/resources/schema.sql">schema.sql</a> 文件，这里只创建涉及我们示例中需要的表</li>
<li>对两张表的操作，我们可以去看这两个类：JdbcClientDetailsService &amp; JdbcTokenStore</li>
<li>此外本示例，添加了 resource_ids ，注意在配置 <code>ResourceServerSecurityConfigurer</code> 中对应</li>
</ol>
</blockquote>
<h3 id="pom">Pom</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>    <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;groupId&gt;</span>mysql<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;artifactId&gt;</span>mysql-connector-java<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;artifactId&gt;</span>spring-boot-starter-jdbc<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span></code></pre></div><h3 id="认证服务器代码修改">认证服务器代码修改</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EnableAuthorizationServer</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyAuthorizationServerConfigurer</span> <span style="color:#66d9ef">extends</span> AuthorizationServerConfigurerAdapter <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> DataSource dataSource<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#a6e22e">MyAuthorizationServerConfigurer</span><span style="color:#f92672">(</span>DataSource dataSource<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">dataSource</span> <span style="color:#f92672">=</span> dataSource<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>ClientDetailsServiceConfigurer clients<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        clients<span style="color:#f92672">.</span><span style="color:#a6e22e">jdbc</span><span style="color:#f92672">(</span>dataSource<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>AuthorizationServerEndpointsConfigurer endpoints<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        endpoints<span style="color:#f92672">.</span><span style="color:#a6e22e">tokenStore</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> JdbcTokenStore<span style="color:#f92672">(</span>dataSource<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>上述代码只显示改动的部分，修改 client 的配置和 tokenStore 的配置，都进行添加数据源即可</p>
<h3 id="请求-token">请求 token</h3>
<p>下面的请求是在 postman 中进行的。 base_url 为设置的全局变量，实际为 http://127.0.0.1:8080</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200901102558730.png" alt="获取token"></p>
<h3 id="获取资源">获取资源</h3>
<p><img src="http://qiniu.5ires.top/uPic/image-20200901102640629.png" alt="请求资源"></p>
<h3 id="观察数据库">观察数据库</h3>
<p><img src="http://qiniu.5ires.top/uPic/image-20200901102741912.png" alt="token存储"></p>
<p>由于 token 在数据库是存储的是二进制形式，但是我们通过 client_id 数据，可以看出是我们刚刚请求的 client。</p>
<p>到此为止我们已经是实现了，把 client 及 token 信息存储到数据库了，这样更便于我们对 client 及 token 数据的管理。但是数据库存储明文密码是不安全，那么接下来，我们对 client_secret 进行加密。</p>
<h2 id="client_secret-加密">client_secret 加密</h2>
<h3 id="配置-passwordencoder">配置 passwordEncoder</h3>
<p>SpringBoot Oauth 本身支持的加密算法有很多种，详细信息可以看类 <code>PasswordEncoderFactories</code> ，包括我们最常用的 MD5、SHA 等，我们使用 <a href="https://zh.wikipedia.org/wiki/Bcrypt">bcrypt 加密算法</a>， 那么直接配置支持全部算法的 passwordEncoder ，即 <code>DelegatingPasswordEncoder</code> 。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>ClientDetailsServiceConfigurer clients<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        	  		clients<span style="color:#f92672">.</span><span style="color:#a6e22e">jdbc</span><span style="color:#f92672">(</span>dataSource<span style="color:#f92672">).</span><span style="color:#a6e22e">passwordEncoder</span><span style="color:#f92672">(</span>PasswordEncoderFactories<span style="color:#f92672">.</span><span style="color:#a6e22e">createDelegatingPasswordEncoder</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="加密-client_secret">加密 client_secret</h3>
<p>既然我们这次使用 bcrypt 加密， 直接可以找到 <code>BCryptPasswordEncoder</code> ，通过它可以给我们的密码进行加密，并把密码存储于数据库当中。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@NoArgsConstructor</span><span style="color:#f92672">(</span>access <span style="color:#f92672">=</span> AccessLevel<span style="color:#f92672">.</span><span style="color:#a6e22e">PRIVATE</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">PasswordEncodeUtil</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">final</span> BCryptPasswordEncoder bcryptEncoder <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> BCryptPasswordEncoder<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">bcryptEncode</span><span style="color:#f92672">(</span>String password<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> bcryptEncoder<span style="color:#f92672">.</span><span style="color:#a6e22e">encode</span><span style="color:#f92672">(</span>password<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> String <span style="color:#a6e22e">genOauthEncodePwd</span><span style="color:#f92672">(</span>String password<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;{bcrypt}&#34;</span> <span style="color:#f92672">+</span> bcryptEncode<span style="color:#f92672">(</span>password<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        String oriPwd <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;123456&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span>genOauthEncodePwd<span style="color:#f92672">(</span>oriPwd<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>原密码：123456
加密后密码：{bcrypt}$2a$10$NPxtsEUMmBGTlzVXlT.scubSCXNEDlBAq2r2t7iQFB/.RaNBlh0nO</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200901113958428.png" alt="client_sercret 加密"></p>
<p><em>注意：加密密码的前缀 大括号 &ldquo;{xxx}&quot;，是指定算法名称。因为框架支持多种算法，那么必须需要带有算法前缀。</em></p>
<h3 id="请求获取-token">请求获取 token</h3>
<p>下面的请求是在 postman 中进行的。 base_url 为设置的全局变量，实际为 http://127.0.0.1:8080</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200901114224122.png" alt="请求token"></p>
<h3 id="请求资源">请求资源</h3>
<p><img src="http://qiniu.5ires.top/uPic/image-20200901114259361.png" alt="请求资源"></p>
<h2 id="小结">小结</h2>
<p>本文主要是以 client_credentials 的授权方式，把 client 和 token 信息存储在数据库当中，来方便我们管理。同时，为了保证密码的安全，我们把 client_secret 用 bcrypt 算法进行了加密操作，并存储到数据库当中。有了上一篇基础，这篇整体挺简单的吧，那同学们动起来，实现一下吧！</p>
<p><strong>个人水平有限，欢迎大家指正，一起交流哦~~~</strong></p>
<p><strong>demo：https://github.com/goldpumpkin/learn-demo/tree/master/springboot-oauth</strong></p>
<p><em>Reference:</em></p>
<ol>
<li><a href="http://andaily.com/spring-oauth-server/db_table_description.html">spring-oauth-server 数据库表说明</a></li>
</ol>]]></content>
        </item>
        
        <item>
            <title>SpringBoot-Oauth2.0（一） —— 初识</title>
            <link>https://goldpumpkin.life/posts/2020/08/springboot-oauth2.0%E4%B8%80-%E5%88%9D%E8%AF%86/</link>
            <pubDate>Wed, 26 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://goldpumpkin.life/posts/2020/08/springboot-oauth2.0%E4%B8%80-%E5%88%9D%E8%AF%86/</guid>
            <description>&lt;p&gt;最近在搞平台 API 的安全和认证的相关东西，接口安全和认证在生产活动中是非常重要的。目前最流行的就是 Oauth2 的认证方式。接下来就用 SpringBoot 的安全依赖简单实践一下，了解一下 Oauth2 的流程。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>最近在搞平台 API 的安全和认证的相关东西，接口安全和认证在生产活动中是非常重要的。目前最流行的就是 Oauth2 的认证方式。接下来就用 SpringBoot 的安全依赖简单实践一下，了解一下 Oauth2 的流程。</p>
<h2 id="oauth2的简单认识">Oauth2的简单认识</h2>
<h3 id="是什么">是什么？</h3>
<p>是一种授权机制，用来授权第三方应用，获取用户数据</p>
<h3 id="授权的四种方式">授权的四种方式</h3>
<ul>
<li>
<p>授权码模式（authorization-code）</p>
<p>此方式安全性最高，授权码通过前端传送，令牌存储在后端。主要适用于有后端的web应用。</p>
</li>
<li>
<p>隐藏式（implicit）</p>
<p>此方式无授权码中间步骤，很不安全。主要适用于纯前端应用。</p>
</li>
<li>
<p>密码式（password）</p>
<p>此方式需要用户高度信任第三方应用，风险比较大。</p>
</li>
<li>
<p>客户端凭证式（client credentials）</p>
<p>这种方式适用于服务器和服务器之间的应用，是关于接口安全的认证。</p>
</li>
</ul>
<h3 id="客户端凭证认证client-credentials">客户端凭证认证（client credentials）</h3>
<p>这种方式是是我们今天主要实践的认证方式。如果有同学在平时的开放当中，经常和外部第三方对接，应该很熟悉这种认证方式。我们最常见的就是在微信开发当中，到微信公众号官方服务器认证获取 access token，之后我们请求相关微信接口，需要带上此 access token 才有权限访问。</p>
<h2 id="springboot-oatuh2-简单实践">SpringBoot Oatuh2 简单实践</h2>
<p>我们简单认识 Oauth2 之后，接下来，我们就动手快速实现一下。</p>
<h3 id="大致的思路步骤">大致的思路步骤：</h3>
<ol>
<li>相关依赖的引入</li>
<li>配置
<ul>
<li>认证服务信息</li>
<li>资源服务信息</li>
</ul>
</li>
<li>验证
<ul>
<li>获取认证 access token</li>
<li>访问资源</li>
</ul>
</li>
</ol>
<h3 id="pom">Pom</h3>
<p>要想开启 Oauth2 认证，我们必须引入 SpringBoot 安全依赖 和 Spring 的 Oauth2 的依赖</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span>    <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.boot<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;artifactId&gt;</span>spring-boot-starter-security<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.security.oauth<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;artifactId&gt;</span>spring-security-oauth2<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>引入安全认证依赖之后，SpringBoot 会对资源服务器上所有的资源默认进行保护。</p>
<h3 id="authorization-service-config---认证服务配置">Authorization Service Config - 认证服务配置</h3>
<p>认证服务的配置，主要包括以下3个方面：</p>
<ol>
<li>
<p>定义 token endpoint 的安全约束</p>
<p>主要配置：是否允许客户端以 Form 表单的形式的登录、定义密码的加密方式等</p>
</li>
<li>
<p>定义客户端详细的信息</p>
<p>客户端的信息包括了：客户端的信息存储方式（内存 or 数据库）以及客户端的认证需要的信息，包括 client_id、client_secret、grant_type、scope</p>
</li>
<li>
<p>定义授权和 token endpoint 以及令牌服务。</p>
<p>可以配置授权的 endpoint、token 的存储方式等</p>
</li>
</ol>
<p>认证服务配置如下：（本次实践，本着能省掉的就省掉的配置原则）</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EnableAuthorizationServer</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyAuthorizationServerConfigurer</span> <span style="color:#66d9ef">extends</span> AuthorizationServerConfigurerAdapter <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 配置安全约束相关配置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param security 定义令牌终结点上的安全约束
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @throws Exception
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>AuthorizationServerSecurityConfigurer security<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 支持client_id、client_secret以form表单的形式登录,参考可见：微信获取access token
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        security<span style="color:#f92672">.</span><span style="color:#a6e22e">allowFormAuthenticationForClients</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 配置客户端详细信息
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param clients 定义客户端详细信息服务的配置程序。可以初始化客户端详细信息，也可以只引用现有存储。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @throws Exception
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>ClientDetailsServiceConfigurer clients<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        clients<span style="color:#f92672">.</span><span style="color:#a6e22e">inMemory</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// client_id
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">withClient</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;gold&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 授权方式
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">authorizedGrantTypes</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;client_credentials&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// 授权范围
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">scopes</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;write&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// client_secret
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">secret</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;{noop}123456&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @param endpoints 定义授权和令牌端点以及令牌服务。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @throws Exception
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>AuthorizationServerEndpointsConfigurer endpoints<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>endpoints<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p><em>注意密码的配置，需要配置加密方式，此实践是没有用任何加密方式的。</em></p>
<p><em>相关信息见：DelegatingPasswordEncoder or PasswordEncoderFactories</em></p>
<h3 id="resource-service-config---资源服务的配置">Resource Service Config - 资源服务的配置</h3>
<p>资源服务的配置，主要包括以下2个方面：</p>
<ol>
<li>
<p>资源服务的安全配置</p>
<p>可以配置 资源 ID、stateless - 资源是否仅允许基于令牌的验证、token 的存储方式等</p>
</li>
<li>
<p>Http 安全配置</p>
<p>我们的被保护的 API，就是在这里配置</p>
</li>
</ol>
<p>资源相关配置：</p>
<p>API：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@RestController</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@AllArgsConstructor</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ResController</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@GetMapping</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/res/{id}&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> String <span style="color:#a6e22e">testOauth</span><span style="color:#f92672">(</span><span style="color:#a6e22e">@PathVariable</span> String id<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#e6db74">&#34;Get the resource &#34;</span> <span style="color:#f92672">+</span> id<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>资源服务配置：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@EnableResourceServer</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">MyResourceServerConfigurer</span> <span style="color:#66d9ef">extends</span> ResourceServerConfigurerAdapter <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>ResourceServerSecurityConfigurer resources<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>resources<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure</span><span style="color:#f92672">(</span>HttpSecurity http<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        http<span style="color:#f92672">.</span><span style="color:#a6e22e">authorizeRequests</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">antMatchers</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;/res/**&#34;</span><span style="color:#f92672">).</span><span style="color:#a6e22e">authenticated</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="配置完成小结">配置完成小结</h3>
<p>我们已经完成了 SpringBoot 的 Oauth2 的最基本的配置。</p>
<p>Client 的相关信息：</p>
<ul>
<li>client_id : gold</li>
<li>client_secret : 123456</li>
<li>scopes : write</li>
<li>grant_type :  client_credentials</li>
</ul>
<p>接下来，我们就来验证一下我们的配置是否生效。</p>
<p>下面的请求是在 postman 中进行的。 base_url 为设置的全局变量，实际为 http://127.0.0.1:8080</p>
<h3 id="直接请求">直接请求</h3>
<p>当我们直接请求，应用返回未授权，无法访问：</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200828171302993.png" alt="image-20200828171302993"></p>
<h3 id="获取-access-token">获取 access token</h3>
<p>springboot oauth 默认获取 token 的 endpoint 是: /oauth/token</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200828153448422.png" alt="image-20200828153448422"></p>
<p>从请求结果可以看到，我们获取了access_token，并且刷新时间是43199秒，即12个小时。</p>
<h3 id="请求被保护的资源">请求被保护的资源</h3>
<p><img src="http://qiniu.5ires.top/uPic/image-20200828153851996.png" alt="image-20200828153851996"></p>
<p>结果来看，我们成功用 access token 访问到了被保护的资源。</p>
<h2 id="小结">小结</h2>
<p>本文简单介绍了 Oauth2 是什么及授权方式，想了解更多 Oauth2 知识的同学，可以到<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html">阮一峰老师博客</a>去学习一下。之后用 SpringBoot 简单实现了客户端凭证式的认证方式，其配置的主要关键点在于理解<strong>资源服务器配置（ResourceServerConfigurer）<strong>和</strong>认证服务器配置（AuthorizationServerConfigurer）</strong>。同学们，动起来，实现一下吧！</p>
<p><strong>个人水平有限，欢迎大家指正，一起交流哦~~~</strong></p>
<p><strong>demo：https://github.com/goldpumpkin/learn-demo/tree/master/springboot-oauth</strong></p>
<p><em>Reference:</em></p>
<ol>
<li><a href="https://projects.spring.io/spring-security-oauth/docs/oauth2.html%C2%A0">spring-security-oauth</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html%C2%A0">理解OAuth 2.0</a></li>
</ol>]]></content>
        </item>
        
        <item>
            <title>Zuul 的路由匹配</title>
            <link>https://goldpumpkin.life/posts/2020/08/zuul-%E7%9A%84%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D/</link>
            <pubDate>Wed, 19 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://goldpumpkin.life/posts/2020/08/zuul-%E7%9A%84%E8%B7%AF%E7%94%B1%E5%8C%B9%E9%85%8D/</guid>
            <description>&lt;p&gt;上一篇，我们已经知道了  Zuul 的配置，其中 Zuul 的路由匹配也是核心配置之一，那 Zuul 是怎么匹配我们的请求，从而让我们的请求进入到一系列的 ZuulFilter 呢？那就和我一起去刨一刨吧。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>上一篇，我们已经知道了  Zuul 的配置，其中 Zuul 的路由匹配也是核心配置之一，那 Zuul 是怎么匹配我们的请求，从而让我们的请求进入到一系列的 ZuulFilter 呢？那就和我一起去刨一刨吧。</p>
<h2 id="zuul的路由匹配规则是什么呢">Zuul的路由匹配规则是什么呢？</h2>
<p>拿出我的必杀器，DDDDebug 一下：</p>
<ol>
<li>
<p>Debug 显示匹配路由是先从 Spring 在<code>AbstractUrlHandlerMapping</code>匹配<code>HandlerExecutionChain</code>开始</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200819230258789.png" alt="Spring-Match-ZuulController"></p>
</li>
<li>
<p>之后进入到<code>ZuulFilter</code>的 Pre 类型的FIlter当中的<code>PreDecorationFilter</code> ，匹配对应的<code>ZuulRoute</code></p>
</li>
<li>
<p>首先把请求的路由修理一下，去掉context-path。就像例子当中，请求 url 中<code>/text/test</code> 去掉了 <code>/text</code>，再接着执行</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200819190711091.png" alt="去掉context-path"></p>
</li>
<li>
<p>之后进入到<code>SimpleRouteLocator</code>，判断是否属于 Zuul 忽略处理的请求，如果不是，再匹配对应<code>ZuulRoute</code>。这里可以发现匹配功能都是由<code>AntPathMatcher</code>来负责</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200819191434405.png" alt="SimpleRouteLocator匹配URL"></p>
</li>
</ol>
<p>那我们发现，不管是 Spring 的匹配 Handler 还是 <code>PreDecorationFilter</code> 匹配 <code>ZuulRoute</code>，都用到的是<code>AntPathMatcher</code>。那我们现在只需要搞明白<code>AntPathMatcher</code>匹配规则就好了。Go on!</p>
<h2 id="ant-style-pattern">ANT Style Pattern</h2>
<p>匹配规则如下：</p>
<table>
<thead>
<tr>
<th>符号</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>?</td>
<td>匹配一个字符</td>
</tr>
<tr>
<td>*</td>
<td>匹配0个或者更多的字符</td>
</tr>
<tr>
<td>**</td>
<td>匹配路径中0个或者更多目录</td>
</tr>
</tbody>
</table>
<p>举例：</p>
<table>
<thead>
<tr>
<th>例子</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>com/t?st.jsp</code></td>
<td>可以匹配 com/test.jsp 或者 <code>com/tast.jsp</code> 或者 <code>com/txst.jsp </code> 等等</td>
</tr>
<tr>
<td><code>com/*.jsp</code></td>
<td>匹配到 com 目录下所有 .jsp 文件</td>
</tr>
<tr>
<td><code>com/**/test.jsp</code></td>
<td>匹配在 com 路径下，所有的 test.jsp 文件</td>
</tr>
<tr>
<td><code>org/springframework/**/*.jsp</code></td>
<td>匹配 org/springframework 路径下所有 .jsp文件</td>
</tr>
<tr>
<td><code>org/**/servlet/bla.jsp</code></td>
<td>可以匹配 org 路径下，后面多层目录且最后一个目录是 servlet/bla.jsp 的路径</td>
</tr>
</tbody>
</table>
<h2 id="总结">总结</h2>
<p>其实，刨下来 Zuul 的路由匹配还挺简单的，主要理解并掌握 Ant 的匹配规则就完事儿了。来动手试一试吧。</p>
<p>Demo地址是：https://github.com/goldpumpkin/learn-demo</p>
<p><em>Ref.</em>
<em><a href="https://stackoverflow.com/questions/2952196/learning-ant-path-style">stackoverflow-learning-ant-path-style</a></em></p>
<p><strong>我的个人水平有限，欢迎大家指正，欢迎交流~</strong></p>]]></content>
        </item>
        
        <item>
            <title>Zuul 的配置</title>
            <link>https://goldpumpkin.life/posts/2020/08/zuul-%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
            <pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate>
            
            <guid>https://goldpumpkin.life/posts/2020/08/zuul-%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
            <description>&lt;p&gt;这一篇主要介绍Zuul的配置。为了大家快速上手，主要通过示例来演示如何进行Zuul配置。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>这一篇主要介绍Zuul的配置。为了大家快速上手，主要通过示例来演示如何进行Zuul配置。</p>
<h2 id="说明">说明</h2>
<p>配置可以分为几个部分：</p>
<p><a href="https://docs.spring.io/spring-cloud-netflix/docs/2.2.4.RELEASE/reference/html/#netflix-zuul-starter">Zuul路由配置</a>：</p>
<ul>
<li>
<p>Zuul自己的配置对应的类是<code>ZuulProperties</code>，配置的前缀是<code>zuul</code></p>
</li>
<li>
<p>自定义的路由配置在代码中对应的是<code>ZuulProperties</code>的属性：<code>Map&lt;String, ZuulRoute&gt; routes = new LinkedHashMap&lt;&gt;()</code></p>
</li>
<li>
<p>routes是一个Map，key代表route名称，value是路由规则配置的详细信息</p>
</li>
</ul>
<p><a href="https://github.com/Netflix/ribbon/wiki/Getting-Started">Ribbon配置信息</a>：主要提供负载均衡、重试、超时等配置。配置类是<a href="http://netflix.github.io/ribbon/ribbon-core-javadoc/com/netflix/client/config/CommonClientConfigKey.html">CommonClientConfigKey</a>，其中要注意配置key是大小写敏感的！</p>
<p><a href="https://github.com/Netflix/Hystrix/wiki/Configuration#coreSize">Hytrix配置信息</a>：主要提供熔断策略、超时等配置</p>
<h2 id="路由配置分为两种">路由配置分为两种</h2>
<ul>
<li>转发到物理地址</li>
<li>转发到服务</li>
</ul>
<h2 id="转发到物理路径的配置">转发到物理路径的配置</h2>
<h3 id="配置说明">配置说明</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">zuul</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">host</span>:
</span></span><span style="display:flex;"><span>  	<span style="color:#75715e"># 链接超时时间</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">connect-timeout-millis</span>: <span style="color:#ae81ff">2000</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># socket超时时间</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">socket-timeout-millis</span>: <span style="color:#ae81ff">10000</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># routes 即为 Map&lt;String, ZuulRoute&gt; routes = new LinkedHashMap&lt;&gt;()</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">routes</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># route名称 - 是ZuulRoute属性中的id，也是Map中的key</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">test</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 匹配路径模板</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/test/**</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 请求转发到的服务id 和 url属性互斥，两个只能配置一个</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 请求转发到的物理路径</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://127.0.0.1:9000 </span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 转发前是否跳过前缀,默认为true，前缀指的是：匹配路径的path前缀 or zuul.prefix定义</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">stripPrefix</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 敏感Header， 转发时会去掉敏感的头部信息，以下是默认的配置。</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">sensitiveHeaders</span>: <span style="color:#ae81ff">Cookie,Set-Cookie,Authorization</span>
</span></span></code></pre></div><h3 id="example---1---最简洁配置">Example - 1 - 最简洁配置</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">zuul</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">routes</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">test</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/test/**</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://127.0.0.1:9000 </span>
</span></span></code></pre></div><p>Request URL：http://127.0.0.1:8001/test</p>
<p>Zuul Forward URL：http://127.0.0.1:9000/</p>
<h3 id="example---2---试验其他配置sensitiveheaders--stripprefix">Example - 2 - 试验其他配置(sensitiveHeaders &amp; stripPrefix)</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">zuul</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">routes</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">test</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/test/**</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">url</span>: <span style="color:#ae81ff">http://127.0.0.1:9000 </span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">stripPrefix</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">sensitiveHeaders</span>: <span style="color:#ae81ff">Test-Sensitive-Header</span>
</span></span></code></pre></div><p>Request:</p>
<ul>
<li>URL: http://127.0.0.1:8001/test</li>
<li>Header:
<ul>
<li>Test-Sensitive-Header : ThisIsSensitiveHeader</li>
<li>Test-nomal-Header: ThisIsNomalHeader</li>
</ul>
</li>
</ul>
<p>Zuul Forward：</p>
<ul>
<li>URL：http://127.0.0.1:9000/test</li>
<li>Header:
<ul>
<li>Test-Sensitive-Header - 是敏感Header不转发</li>
<li>Test-nomal-Header - 进行转发</li>
</ul>
</li>
</ul>
<p><img src="http://qiniu.5ires.top/uPic/image-20200816225825634.png" alt="Example2-route-matched"></p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200816230622007.png" alt="Example2-请求情况"></p>
<h2 id="转发到service的配置">转发到Service的配置</h2>
<h3 id="配置说明-1">配置说明</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#75715e"># 转发到某个的服务 - 这个服务可以是服务发现的服务，也可以配置物理地址</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">zuul</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">host</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">connect-timeout-millis</span>: <span style="color:#ae81ff">2000</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">socket-timeout-millis</span>: <span style="color:#ae81ff">10000</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">routes</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">test-service</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/test/**</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 服务名称: 如果使用服务治理框架那么填写服务名称，否则自定义服务名称</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serviceId</span>: <span style="color:#ae81ff">test-service</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 是否开启重试，具体重试设置是在Ribbon的配置中设置</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">retryable</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      <span style="color:#ae81ff">...</span>
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span><span style="color:#75715e"># hystrix配置：提供熔断配置</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">hystrix</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">command</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 服务名称：default or 自己的服务名称</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">default</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">execution</span>:
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">isolation</span>:
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">thread</span>:
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">timeoutInMilliseconds</span>: <span style="color:#ae81ff">3000</span>
</span></span><span style="display:flex;"><span>            <span style="color:#ae81ff">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">ribbon</span>:
</span></span><span style="display:flex;"><span>	<span style="color:#75715e"># 是否使用 Eureka</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">eureka</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># 对实例重试的次数(不包括每个实例的首次的请求)</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">MaxAutoRetries</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># 同一个服务 重试其他实例数量</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># eg: listOfServers: s1, s2, s3  当此配置为1，第一次访问s1, 请求重试只会在s1、s2中进行</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">MaxAutoRetriesNextServer</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># 是否所有操作都允许重试。默认值为false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">OkToRetryOnAllOperations</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>  <span style="color:#ae81ff">...</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 服务的相关配置</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">test-service</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ribbon</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># 在提供的server列表中获取服务实例</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">NIWSServerListClassName</span>: <span style="color:#ae81ff">com.netflix.loadbalancer.ConfigurationBasedServerList</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">listOfServers</span>: <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">9000</span>, <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">9001</span>
</span></span><span style="display:flex;"><span>    <span style="color:#ae81ff">...</span>
</span></span></code></pre></div><p>基本配置是和前面提到的转发到物理地址的配置是相同的，不同的是这里增加了Ribbon和Hytrix的相关配置。</p>
<p>匹配路由映射到服务，服务是由服务治理框架提供，如Eureka、Consul。之后通过Ribbon，进行负载均衡，Hytrix负责防护熔断。</p>
<p>所以说Zuul除了路由配置是自身提供的，其余的配置是由Ribbon和Hytrix提供的。</p>
<h3 id="example---3---ribbon的简单配置">Example - 3 - Ribbon的简单配置</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">zuul</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">routes</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">test-service</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/test/**</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serviceId</span>: <span style="color:#ae81ff">test-service</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">stripPrefix</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">test-service</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ribbon</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">listOfServers</span>: <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">9000</span>
</span></span></code></pre></div><p>Request URL：http://127.0.0.1:8001/test
Zuul Forward URL：http://127.0.0.1:9000/test</p>
<h3 id="example---4---重试">Example - 4 - 重试</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-yaml" data-lang="yaml"><span style="display:flex;"><span><span style="color:#f92672">zuul</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">routes</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">test-service</span>:
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">path</span>: <span style="color:#ae81ff">/test/**</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">serviceId</span>: <span style="color:#ae81ff">test-service</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">stripPrefix</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e"># 开启重试</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">retryable</span>: <span style="color:#66d9ef">true</span>
</span></span><span style="display:flex;"><span>      
</span></span><span style="display:flex;"><span><span style="color:#75715e"># 具体重试规则在ribbon中配置</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">ribbon</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">eureka</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">enabled</span>: <span style="color:#66d9ef">false</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">MaxAutoRetries</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">MaxAutoRetriesNextServer</span>: <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">test-service</span>:
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">ribbon</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">listOfServers</span>: <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">9000</span>, <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">9001</span>, <span style="color:#ae81ff">127.0.0.1</span>:<span style="color:#ae81ff">9002</span>
</span></span></code></pre></div><p>Request URL：http://127.0.0.1:8001/test</p>
<p>第一步：</p>
<ul>
<li>转发到：http://127.0.0.1:9000/test</li>
<li>返回：code: 500</li>
</ul>
<p><img src="http://qiniu.5ires.top/uPic/image-20200817190925927.png" alt="Example4-第一次请求到端口9000"></p>
<p>第二步：</p>
<ul>
<li>重试：http://127.0.0.1:9000/test</li>
<li>返回：code: 500</li>
</ul>
<p><img src="http://qiniu.5ires.top/uPic/image-20200817191248495.png" alt="Example4-重试第一次端口号9001"></p>
<p>第三步和第四步：</p>
<ul>
<li>重试：http://127.0.0.1:9001/test</li>
<li>返回：因为9001端口没有启动服务，返回没有连接</li>
</ul>
<p><img src="http://qiniu.5ires.top/uPic/image-20200817191521361.png" alt="Example4-重试转发至服务的另一个实例 端口号9001"></p>
<p>至此，本次请求，一共重试了3次。</p>
<p>测试代码：https://github.com/goldpumpkin/learn-demo</p>
<h2 id="总结">总结</h2>
<p>Zuul的配置，包括了自己的路由配置、Ribbon配置以及Hytrix配置。其中路由配置分为两种，一种是把请求转发到物理地址，另一种是把请求转发到微服务。要想掌握和配置好Zuul，那么必须学习Ribbon和Hytrix，这样才能很好的驾驭Zuul。</p>
<p><strong>我的个人水平有限，欢迎大家指正，欢迎交流~</strong></p>]]></content>
        </item>
        
        <item>
            <title>SpringCloud 整合 Zuul 源码分析</title>
            <link>https://goldpumpkin.life/posts/2020/07/springcloud-%E6%95%B4%E5%90%88-zuul-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
            <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://goldpumpkin.life/posts/2020/07/springcloud-%E6%95%B4%E5%90%88-zuul-%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
            <description>&lt;p&gt;今天我们分析下 SpringCloud 是怎么整合 Zuul 的。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>今天我们分析下 SpringCloud 是怎么整合 Zuul 的。</p>
<h2 id="回顾">回顾</h2>
<ol>
<li>
<p>Zuul是通过<code>ZuulServletFilter</code>或者 <code>ZuulServlet</code>接管我们的请求</p>
</li>
<li>
<p>Zuul整个流程如下：</p>
<p><code>ZuulServletFilter(ZuulServlet)</code> -&gt;  <code>ZuulRunner</code> -&gt; <code>FilterProcessor</code> -&gt; <code>ZuulFilter</code></p>
</li>
</ol>
<h2 id="目标">目标</h2>
<p>明确SpringMVC和Zuul框架是怎么配合的</p>
<h2 id="引入zuul的版本信息">引入Zuul的版本信息</h2>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span><span style="color:#f92672">&lt;properties&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;spring-cloud.version&gt;</span>Hoxton.RELEASE<span style="color:#f92672">&lt;/spring-cloud.version&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/properties&gt;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;dependencyManagement&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>  	<span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>    	<span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.cloud<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;artifactId&gt;</span>spring-cloud-dependencies<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;version&gt;</span>${spring-cloud.version}<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;type&gt;</span>pom<span style="color:#f92672">&lt;/type&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;scope&gt;</span>import<span style="color:#f92672">&lt;/scope&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&lt;/dependencies&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/dependencyManagement&gt;</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;dependencies&gt;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>  	<span style="color:#f92672">&lt;groupId&gt;</span>org.springframework.cloud<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;artifactId&gt;</span>spring-cloud-starter-netflix-zuul<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;/dependencies&gt;</span>
</span></span></code></pre></div><h2 id="zuul功能启用及配置的加载">Zuul功能启用及配置的加载</h2>
<h3 id="zuul的启用---enablezuulproxy">Zuul的启用 - @EnableZuulProxy</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 引入断路器功能
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">@EnableCircuitBreaker</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Target</span><span style="color:#f92672">(</span>ElementType<span style="color:#f92672">.</span><span style="color:#a6e22e">TYPE</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@Retention</span><span style="color:#f92672">(</span>RetentionPolicy<span style="color:#f92672">.</span><span style="color:#a6e22e">RUNTIME</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 注入触发Zuul配置类的标记Bean
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">@Import</span><span style="color:#f92672">(</span>ZuulProxyMarkerConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#a6e22e">@interface</span> EnableZuulProxy <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="zuulproxyautoconfiguration---zuul自动配置bean">ZuulProxyAutoConfiguration - Zuul自动配置Bean</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">// 此配置类不会被代理
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">@Configuration</span><span style="color:#f92672">(</span>proxyBeanMethods <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 引入Ribbon相关配置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">@Import</span><span style="color:#f92672">({</span> RibbonCommandFactoryConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">RestClientRibbonConfiguration</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>		RibbonCommandFactoryConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">OkHttpRibbonConfiguration</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>		RibbonCommandFactoryConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">HttpClientRibbonConfiguration</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>		HttpClientConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@ConditionalOnBean</span><span style="color:#f92672">(</span>ZuulProxyMarkerConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">Marker</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZuulProxyAutoConfiguration</span> <span style="color:#66d9ef">extends</span> ZuulServerAutoConfiguration <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 省略部分代码。。。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 加载pre filters bean
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@ConditionalOnMissingBean</span><span style="color:#f92672">(</span>PreDecorationFilter<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> PreDecorationFilter <span style="color:#a6e22e">preDecorationFilter</span><span style="color:#f92672">(</span>RouteLocator routeLocator<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			ProxyRequestHelper proxyRequestHelper<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> PreDecorationFilter<span style="color:#f92672">(</span>routeLocator<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">server</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getServlet</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getContextPath</span><span style="color:#f92672">(),</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">zuulProperties</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>				proxyRequestHelper<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 加载route filters bean
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@ConditionalOnMissingBean</span><span style="color:#f92672">(</span>RibbonRoutingFilter<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> RibbonRoutingFilter <span style="color:#a6e22e">ribbonRoutingFilter</span><span style="color:#f92672">(</span>ProxyRequestHelper helper<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			RibbonCommandFactory<span style="color:#f92672">&lt;?&gt;</span> ribbonCommandFactory<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		RibbonRoutingFilter filter <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> RibbonRoutingFilter<span style="color:#f92672">(</span>helper<span style="color:#f92672">,</span> ribbonCommandFactory<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">requestCustomizers</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> filter<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 加载route filters bean
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@ConditionalOnMissingBean</span><span style="color:#f92672">({</span> SimpleHostRoutingFilter<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			CloseableHttpClient<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> SimpleHostRoutingFilter <span style="color:#a6e22e">simpleHostRoutingFilter</span><span style="color:#f92672">(</span>ProxyRequestHelper helper<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			ZuulProperties zuulProperties<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			ApacheHttpClientConnectionManagerFactory connectionManagerFactory<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			ApacheHttpClientFactory httpClientFactory<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SimpleHostRoutingFilter<span style="color:#f92672">(</span>helper<span style="color:#f92672">,</span> zuulProperties<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>				connectionManagerFactory<span style="color:#f92672">,</span> httpClientFactory<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h3 id="zuulserverautoconfiguration---zuul自动配置bean">ZuulServerAutoConfiguration - Zuul自动配置Bean</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Configuration</span><span style="color:#f92672">(</span>proxyBeanMethods <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 加载zuul的自定义properties配置
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">@EnableConfigurationProperties</span><span style="color:#f92672">({</span> ZuulProperties<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// 加载前提：classpath下有类ZuulServlet和ZuulServletFilter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">@ConditionalOnClass</span><span style="color:#f92672">({</span> ZuulServlet<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">,</span> ZuulServletFilter<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span> <span style="color:#f92672">})</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">@ConditionalOnBean</span><span style="color:#f92672">(</span>ZuulServerMarkerConfiguration<span style="color:#f92672">.</span><span style="color:#a6e22e">Marker</span><span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZuulServerAutoConfiguration</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 省略部分代码。。。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// ZuulController是Controller的一个实现，负责将拦截的请求交给ZuulServlet处理
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> ZuulController <span style="color:#a6e22e">zuulController</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> ZuulController<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// ZuulHandlerMapping负责路由匹配
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> ZuulHandlerMapping <span style="color:#a6e22e">zuulHandlerMapping</span><span style="color:#f92672">(</span>RouteLocator routes<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			ZuulController zuulController<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		ZuulHandlerMapping mapping <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ZuulHandlerMapping<span style="color:#f92672">(</span>routes<span style="color:#f92672">,</span> zuulController<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		mapping<span style="color:#f92672">.</span><span style="color:#a6e22e">setErrorController</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">errorController</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		mapping<span style="color:#f92672">.</span><span style="color:#a6e22e">setCorsConfigurations</span><span style="color:#f92672">(</span>getCorsConfigurations<span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> mapping<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 默认加载ZuulServlet
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@ConditionalOnMissingBean</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;zuulServlet&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@ConditionalOnProperty</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;zuul.use-filter&#34;</span><span style="color:#f92672">,</span> havingValue <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;false&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			matchIfMissing <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> ServletRegistrationBean <span style="color:#a6e22e">zuulServlet</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		ServletRegistrationBean<span style="color:#f92672">&lt;</span>ZuulServlet<span style="color:#f92672">&gt;</span> servlet <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ServletRegistrationBean<span style="color:#f92672">&lt;&gt;(</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">new</span> ZuulServlet<span style="color:#f92672">(),</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">zuulProperties</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getServletPattern</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// The whole point of exposing this servlet is to provide a route that doesn&#39;t
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// buffer requests.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		servlet<span style="color:#f92672">.</span><span style="color:#a6e22e">addInitParameter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;buffer-requests&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;false&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> servlet<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 当配置zuul.use-filter=true，加载zuulServletFilter, 表示用filter来拦截请求
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@ConditionalOnMissingBean</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;zuulServletFilter&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@ConditionalOnProperty</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;zuul.use-filter&#34;</span><span style="color:#f92672">,</span> havingValue <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;true&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			matchIfMissing <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> FilterRegistrationBean <span style="color:#a6e22e">zuulServletFilter</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">final</span> FilterRegistrationBean<span style="color:#f92672">&lt;</span>ZuulServletFilter<span style="color:#f92672">&gt;</span> filterRegistration <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> FilterRegistrationBean<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>		filterRegistration<span style="color:#f92672">.</span><span style="color:#a6e22e">setUrlPatterns</span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>				Collections<span style="color:#f92672">.</span><span style="color:#a6e22e">singleton</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">zuulProperties</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getServletPattern</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>		filterRegistration<span style="color:#f92672">.</span><span style="color:#a6e22e">setFilter</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ZuulServletFilter<span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>		filterRegistration<span style="color:#f92672">.</span><span style="color:#a6e22e">setOrder</span><span style="color:#f92672">(</span>Ordered<span style="color:#f92672">.</span><span style="color:#a6e22e">LOWEST_PRECEDENCE</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// The whole point of exposing this servlet is to provide a route that doesn&#39;t
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#75715e">// buffer requests.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		filterRegistration<span style="color:#f92672">.</span><span style="color:#a6e22e">addInitParameter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;buffer-requests&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;false&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> filterRegistration<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#75715e">// 在Zuul各阶段filter处理过程中捕获异常，SendErrorFilter会forward &#34;/error&#34; 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> SendErrorFilter <span style="color:#a6e22e">sendErrorFilter</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> SendErrorFilter<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@Configuration</span><span style="color:#f92672">(</span>proxyBeanMethods <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">protected</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZuulFilterConfiguration</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 注入Spring容器中的ZuulFilter类型所有的实现类，包括内置和自定义的Filter，内置的有10个
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">@Autowired</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">private</span> Map<span style="color:#f92672">&lt;</span>String<span style="color:#f92672">,</span> ZuulFilter<span style="color:#f92672">&gt;</span> filters<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 注册ZuulFilter到FilterRegistry中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> ZuulFilterInitializer <span style="color:#a6e22e">zuulFilterInitializer</span><span style="color:#f92672">(</span>CounterFactory counterFactory<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>				TracerFactory tracerFactory<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			FilterLoader filterLoader <span style="color:#f92672">=</span> FilterLoader<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>			FilterRegistry filterRegistry <span style="color:#f92672">=</span> FilterRegistry<span style="color:#f92672">.</span><span style="color:#a6e22e">instance</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">new</span> ZuulFilterInitializer<span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">filters</span><span style="color:#f92672">,</span> counterFactory<span style="color:#f92672">,</span> tracerFactory<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>					filterLoader<span style="color:#f92672">,</span> filterRegistry<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>以上两个类，加载了Zuul的相关配置类：</p>
<ul>
<li>
<p>拦截请求：</p>
<ul>
<li>和SpringMVC结合的Bean：<code>ZuulController</code>、<code>ZuulHandlerMapping</code></li>
<li>通过Web Filter拦截请求Bean：<code>ZuulServletFilter</code></li>
</ul>
</li>
<li>
<p>Zuul流程需要的Bean：</p>
<ul>
<li>
<p>自带的ZuulFilter，有10个下面会一一介绍</p>
</li>
<li>
<p>监控相关</p>
</li>
<li>
<p>ZuulFilter的容器：<code>FilterRegistry</code></p>
</li>
</ul>
</li>
</ul>
<h3 id="默认的zuulfilters">默认的ZuulFilters</h3>
<h3 id="pre-filter">Pre Filter</h3>
<ol>
<li>
<p><code>ServletDetectionFilter</code>  order = -3</p>
<p>作用：判断请求是否是由<code>DispatcherServlet</code> or  <code>ZuulServlet</code>传来的，并把判断结果以键值对的形式放在<code>RequestContext</code></p>
</li>
<li>
<p><code>Servlet30WrapperFilter</code> order = -2</p>
<p>作用：包装request，兼容servlet3.0</p>
</li>
<li>
<p><code>FormBodyWrapperFilter</code> order = -1</p>
<p>作用：包装表单数据并为下游服务重新编码</p>
</li>
<li>
<p><code>DebugFilter</code> order = 1</p>
<p>作用：如果debug请求，那么会在<code>RequestContext</code>中标记为debug请求和routing</p>
</li>
<li>
<p><code>PreDecorationFilter</code> = 5</p>
<p>作用：请求路由和zuul路由配置进行匹配，并设置与代理相关的头部信息</p>
</li>
</ol>
<h3 id="route-filter">Route Filter</h3>
<ol>
<li>
<p><code>RibbonRoutingFilter</code> order = 10</p>
<p>作用：使用Ribbon、Hytrix和可插拔的httpClient发送请求，serviceId、是否重试以及负载均衡策略在相关联的<code>RequestContext</code>获取</p>
</li>
<li>
<p><code>SimpleHostRoutingFilter</code>  order = 100</p>
<p>作用：用HttpClient发送请求到预定的URLs，URLs通过<code>RequestContext#getRouteHost()</code>获取</p>
</li>
<li>
<p><code>SendForwardFilter</code> order = 500</p>
<p>作用：用<code>RequestDispatcher</code>forwards请求，转发的地址是<code>RequestContext</code>的<code>FilterConstants#FORWARD_TO_KEY</code>对应value</p>
</li>
</ol>
<h3 id="post-filter">Post Filter</h3>
<ol>
<li>
<p><code>SendResponseFilter</code> order = 1000</p>
<p>作用：写 代理的请求得到的响应 到 当前响应</p>
</li>
</ol>
<h3 id="error-filter">Error Filter</h3>
<ol>
<li>
<p><code>SendErrorFilter</code>  order = 0</p>
<p>作用：如果<code>RequestContext#getThrowable()</code> 不为空，默认将请求转发到 /error</p>
</li>
</ol>
<h2 id="springmvc怎么把请求转发给zuul">SpringMVC怎么把请求转发给Zuul？</h2>
<h3 id="从配置类分析">从配置类分析</h3>
<p>从上述配置可以看下几个重要的配置类源码：</p>
<h4 id="zuulcontroller"><code>ZuulController</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZuulController</span> <span style="color:#66d9ef">extends</span> ServletWrappingController <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#a6e22e">ZuulController</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 设置Servlet的类型
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		setServletClass<span style="color:#f92672">(</span>ZuulServlet<span style="color:#f92672">.</span><span style="color:#a6e22e">class</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		setServletName<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;zuul&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		setSupportedMethods<span style="color:#f92672">((</span>String<span style="color:#f92672">[])</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">);</span> <span style="color:#75715e">// Allow all
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> ModelAndView <span style="color:#a6e22e">handleRequest</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			HttpServletResponse response<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// We don&#39;t care about the other features of the base class, just want to
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#75715e">// handle the request
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">handleRequestInternal</span><span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#75715e">// @see com.netflix.zuul.context.ContextLifecycleFilter.doFilter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			RequestContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getCurrentContext</span><span style="color:#f92672">().</span><span style="color:#a6e22e">unset</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="servletwrappingcontroller"><code>ServletWrappingController</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ServletWrappingController</span> <span style="color:#66d9ef">extends</span> AbstractController <span style="color:#66d9ef">implements</span> BeanNameAware<span style="color:#f92672">,</span> InitializingBean<span style="color:#f92672">,</span> DisposableBean <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 省略代码。。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">afterPropertiesSet</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servletClass</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> IllegalArgumentException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;&#39;servletClass&#39; is required&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servletName</span> <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servletName</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">beanName</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 通过反射 初始化servlet
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servletInstance</span> <span style="color:#f92672">=</span> ReflectionUtils<span style="color:#f92672">.</span><span style="color:#a6e22e">accessibleConstructor</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servletClass</span><span style="color:#f92672">).</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servletInstance</span><span style="color:#f92672">.</span><span style="color:#a6e22e">init</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> DelegatingServletConfig<span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// 通过servlet实例处理请求
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">protected</span> ModelAndView <span style="color:#a6e22e">handleRequestInternal</span><span style="color:#f92672">(</span>HttpServletRequest request<span style="color:#f92672">,</span> HttpServletResponse response<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			Assert<span style="color:#f92672">.</span><span style="color:#a6e22e">state</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servletInstance</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;No Servlet instance&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">servletInstance</span><span style="color:#f92672">.</span><span style="color:#a6e22e">service</span><span style="color:#f92672">(</span>request<span style="color:#f92672">,</span> response<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><h4 id="zuulhandlermapping"><code>ZuulHandlerMapping</code></h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZuulHandlerMapping</span> <span style="color:#66d9ef">extends</span> AbstractUrlHandlerMapping <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">final</span> ZuulController zuul<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">volatile</span> <span style="color:#66d9ef">boolean</span> dirty <span style="color:#f92672">=</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 根据寻找路由处理器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">protected</span> Object <span style="color:#a6e22e">lookupHandler</span><span style="color:#f92672">(</span>String urlPath<span style="color:#f92672">,</span> HttpServletRequest request<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">errorController</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> urlPath<span style="color:#f92672">.</span><span style="color:#a6e22e">equals</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">errorController</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getErrorPath</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 如果属于配置的忽视路由，则返回null
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>isIgnoredPath<span style="color:#f92672">(</span>urlPath<span style="color:#f92672">,</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">routeLocator</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getIgnoredPaths</span><span style="color:#f92672">()))</span> <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>		RequestContext ctx <span style="color:#f92672">=</span> RequestContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getCurrentContext</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>ctx<span style="color:#f92672">.</span><span style="color:#a6e22e">containsKey</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;forward.to&#34;</span><span style="color:#f92672">))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">dirty</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// dirty默认为true，第一次会触发注册处理器到Spring容器中
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#75715e">// 或者发送zuul路由刷新事件，设置dirty为true，见ZuulRefreshListener
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>			<span style="color:#66d9ef">synchronized</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>				<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">dirty</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>					registerHandlers<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>					<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">dirty</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>				<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 交给Spring查找路由对应的handler
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		<span style="color:#66d9ef">return</span> <span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">lookupHandler</span><span style="color:#f92672">(</span>urlPath<span style="color:#f92672">,</span> request<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 注册配置路由对应的处理器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">registerHandlers</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		Collection<span style="color:#f92672">&lt;</span>Route<span style="color:#f92672">&gt;</span> routes <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">routeLocator</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getRoutes</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>routes<span style="color:#f92672">.</span><span style="color:#a6e22e">isEmpty</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">logger</span><span style="color:#f92672">.</span><span style="color:#a6e22e">warn</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;No routes found from RouteLocator&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>			<span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Route route <span style="color:#f92672">:</span> routes<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 在Spring容器中注册zuul路由配置对应ZuulController处理器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				registerHandler<span style="color:#f92672">(</span>route<span style="color:#f92672">.</span><span style="color:#a6e22e">getFullPath</span><span style="color:#f92672">(),</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">zuul</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>			<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>		<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>以上配置类：</p>
<ul>
<li><code>ZuulController</code>：它是<code>ServletWrappingController</code>的 子类，将请求给到<code>ZuulServlet</code>去处理</li>
<li><code>ZuulHandlerMapping</code>：它是<code>AbstractUrlHandlerMapping</code>的子类，将请求路由到<code>ZuulController</code>处理</li>
<li><code>ZuulServlet</code>：由上一篇知道它是Zuul流程的入口之一</li>
</ul>
<blockquote>
<p>回顾SpingMVC对于请求的处理流程</p>
<ol>
<li>客户端请求交给SpringMVC的<code>DispatcherServlet</code>统一处理</li>
<li>通过已经注册的<code>HandlerMapping</code>, 根据请求路由找到处理器执行链<code>HandlerExecutionChain</code>，包括请求各个拦截器<code>HandlerInterceptor</code>和请求处理器<code>handler</code></li>
<li>找到请求处理器对应的适配器<code>HandlerAdapter</code></li>
<li>执行已注册的各拦截器的<code>preHandle</code>方法</li>
<li>调用处理器处理请求，返回模型数据以及视图<code>ModelAndView</code></li>
<li>执行已注册的各拦截器的<code>postHandle</code>方法</li>
<li>根据给定的<code>ModelAndView</code>进行渲染</li>
<li>响应客户端</li>
</ol>
</blockquote>
<p>结合SpingMVC对于请求的处理流程可以猜到，当请求给到SpringMVC的<code>DispatcherServlet</code>后，如果该路由是需要Zuul拦截的请求，那么会匹配到<code>ZuulHandlerMapping</code>，从而找到处理器<code>ZuulController</code>，之后在处理的时候，会交给<code>ZuulServlet</code>，后面的流程见上一篇文章。</p>
<h3 id="debug验证">Debug验证</h3>
<p>zuul拦截配置：</p>
<pre tabindex="0"><code class="language-properties" data-lang="properties"># zuul
# 是否启用ZuulServletFilter
# zuul.use-filter=true
ribbon.ConnectTimeout = 30000
ribbon.ReadTimeout = 30000
ribbon.eureka.enabled = false

management.endpoints.web.exposure.include = *
zuul.routes.test.path = /test/**
zuul.routes.test.stripPrefix = false
test.ribbon.listOfServers = ${service.test}
service.test=http://127.0.0.1:8081/t/test
</code></pre><p>请求：<code>curl -v http://127.0.0.1:8080/test</code></p>
<p>图示过程：</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200724183906920.png" alt="image-20200724183906920"></p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200724184049891.png" alt="image-20200724184049891"></p>
<p>结果显示：猜想是正确的。
大致流程：<code>DispatcherServlet</code> -&gt; <code>ZuulController</code> -&gt; <code>ZuulServlet</code> -&gt; 执行各阶段<code>ZuulFilters</code></p>
<p><img src="http://qiniu.5ires.top/uPic/ZuulServlet%E6%8E%A5%E7%AE%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="image-20200803183334690"></p>
<h2 id="zuulservletfilter---另一种拦截请求流程">ZuulServletFilter - 另一种拦截请求流程</h2>
<h3 id="配置">配置</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span>	<span style="color:#75715e">// 在类ZuulServerAutoConfiguration中加载
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@Bean</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@ConditionalOnMissingBean</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;zuulServletFilter&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@ConditionalOnProperty</span><span style="color:#f92672">(</span>name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;zuul.use-filter&#34;</span><span style="color:#f92672">,</span> havingValue <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;true&#34;</span><span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			matchIfMissing <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> FilterRegistrationBean <span style="color:#a6e22e">zuulServletFilter</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">final</span> FilterRegistrationBean<span style="color:#f92672">&lt;</span>ZuulServletFilter<span style="color:#f92672">&gt;</span> filterRegistration <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> FilterRegistrationBean<span style="color:#f92672">&lt;&gt;();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// URL匹配规则: /zuul
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>		filterRegistration<span style="color:#f92672">.</span><span style="color:#a6e22e">setUrlPatterns</span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>				Collections<span style="color:#f92672">.</span><span style="color:#a6e22e">singleton</span><span style="color:#f92672">(</span><span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">zuulProperties</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getServletPattern</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>		filterRegistration<span style="color:#f92672">.</span><span style="color:#a6e22e">setFilter</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ZuulServletFilter<span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>		filterRegistration<span style="color:#f92672">.</span><span style="color:#a6e22e">setOrder</span><span style="color:#f92672">(</span>Ordered<span style="color:#f92672">.</span><span style="color:#a6e22e">LOWEST_PRECEDENCE</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		filterRegistration<span style="color:#f92672">.</span><span style="color:#a6e22e">addInitParameter</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;buffer-requests&#34;</span><span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;false&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> filterRegistration<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span></code></pre></div><p><code>ZuulServletFilter</code>的URL匹配规则是<code>/zuul</code>, 而且如果要是使得<code>ZuulServletFilter</code>Bean加载，必须在配置文件中，添加：<code>zuul.use-filter=true</code>，如图：</p>
<pre tabindex="0"><code class="language-properties" data-lang="properties"># 是否启用filter拦截
zuul.use-filter=true
zuul.routes.test.path = /zuul/test/**
zuul.routes.test.stripPrefix = false
test.ribbon.listOfServers = ${service.test}
service.test=http://127.0.0.1:8081
</code></pre><h3 id="zuulservletfilter源码">ZuulServletFilter源码</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZuulServletFilter</span> <span style="color:#66d9ef">extends</span> com<span style="color:#f92672">.</span><span style="color:#a6e22e">netflix</span><span style="color:#f92672">.</span><span style="color:#a6e22e">zuul</span><span style="color:#f92672">.</span><span style="color:#a6e22e">filters</span><span style="color:#f92672">.</span><span style="color:#a6e22e">ZuulServletFilter</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">doFilter</span><span style="color:#f92672">(</span>ServletRequest servletRequest<span style="color:#f92672">,</span> ServletResponse servletResponse<span style="color:#f92672">,</span>
</span></span><span style="display:flex;"><span>			FilterChain filterChain<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException<span style="color:#f92672">,</span> ServletException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>		RequestContext context <span style="color:#f92672">=</span> RequestContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getCurrentContext</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>		context<span style="color:#f92672">.</span><span style="color:#a6e22e">setZuulEngineRan</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">super</span><span style="color:#f92672">.</span><span style="color:#a6e22e">doFilter</span><span style="color:#f92672">(</span>servletRequest<span style="color:#f92672">,</span> servletResponse<span style="color:#f92672">,</span> filterChain<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>	<span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>源码很简单，在请求上下文添加了一个标志位<code>zuulEngineRan</code>为true。并执行父类<code>com.netflix.zuul.filters.ZuulServletFilter</code>的<code>doFilter</code>方法，进而进入了Zuul的核心流程当中，后面的流程我们已经熟悉了。</p>
<p>其中要注意下，<code>com.netflix.zuul.filters.ZuulServletFilter</code>虽然是Filter，但是并没有在其<code>doFilter</code>方法中调用<code>FilterChain</code>的<code>doFilter</code>方法，我们可以回想下，如果是我们自己写FIlter，一定会调用。之所以<code>ZuulServletFilte</code>没有这么做，是因为它要接管请求，并不要Servlet来处理。</p>
<p><img src="http://qiniu.5ires.top/uPic/ZuulServletFilter.png" alt="image-20200803183210907"></p>
<p>大致流程如图：</p>
<p><img src="http://qiniu.5ires.top/uPic/ZuulServletFilter%E6%8E%A5%E7%AE%A1%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt="image-20200803183440164"></p>
<h2 id="总结">总结</h2>
<p>Zuul和Spring结合并接管请求主要有两种方式：</p>
<ul>
<li>在Spring容器中通过注册请求处理器<code>ZuulController</code>和路由处理器的映射<code>ZuulHandlerMapping</code>，做到请求的拦截，并内置了一些ZuulFIlter保证请求的处理。</li>
<li>通过注册<code>ZuulServletFilter</code>,使用Filter方式接管请求，注意默认的路径匹配及生效配置</li>
</ul>]]></content>
        </item>
        
        <item>
            <title>Zuul 的源码分析</title>
            <link>https://goldpumpkin.life/posts/2020/07/zuul-%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
            <pubDate>Tue, 21 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://goldpumpkin.life/posts/2020/07/zuul-%E7%9A%84%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
            <description>&lt;p&gt;Zuul 的源码读过吗？让我们一起看看吧&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Zuul 的源码读过吗？让我们一起看看吧</p>
<h2 id="目标">目标</h2>
<p>明确Zuul的执行流程和重要类的分析</p>
<h2 id="zuul过滤器的生命周期">Zuul过滤器的生命周期</h2>
<p><img src="http://qiniu.5ires.top/uPic/view.png" alt="preview"></p>
<h2 id="源码分析">源码分析</h2>
<h3 id="zuul怎么拦截我们的请求">zuul怎么拦截我们的请求？</h3>
<p><code>ZuulServletFilter</code> - 继承 Filter | <code>ZuulServlet</code> - 继承 HttpServlet
可以通过这两个类，让Zuul接管请求。由于他们的逻辑基本一致，下面用<code>ZuulServletFilter</code>来分析</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* Zuul核心处理类，拦截请求
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">**/</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZuulServletFilter</span> <span style="color:#66d9ef">implements</span> Filter <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> ZuulRunner zuulRunner<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>		<span style="color:#75715e">// 省略...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">doFilter</span><span style="color:#f92672">(</span>ServletRequest servletRequest<span style="color:#f92672">,</span> ServletResponse servletResponse<span style="color:#f92672">,</span> FilterChain filterChain<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> IOException<span style="color:#f92672">,</span> ServletException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>         		<span style="color:#75715e">// 初始化requests和responses到RequestContext中，详见ZuulRunner#init
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            init<span style="color:#f92672">((</span>HttpServletRequest<span style="color:#f92672">)</span> servletRequest<span style="color:#f92672">,</span> <span style="color:#f92672">(</span>HttpServletResponse<span style="color:#f92672">)</span> servletResponse<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>              	<span style="color:#75715e">// 执行 filterType=pre 的过滤器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                preRouting<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>ZuulException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 执行 filterType=error 的过滤器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                error<span style="color:#f92672">(</span>e<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                postRouting<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#75715e">// Only forward onto to the chain if a zuul response is not being sent
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>RequestContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getCurrentContext</span><span style="color:#f92672">().</span><span style="color:#a6e22e">sendZuulResponse</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                filterChain<span style="color:#f92672">.</span><span style="color:#a6e22e">doFilter</span><span style="color:#f92672">(</span>servletRequest<span style="color:#f92672">,</span> servletResponse<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>	              <span style="color:#75715e">// 执行 filterType=route 的过滤器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                routing<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>ZuulException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                error<span style="color:#f92672">(</span>e<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                postRouting<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>              	<span style="color:#75715e">// 执行 filterType=post 的过滤器
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                postRouting<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>ZuulException e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                error<span style="color:#f92672">(</span>e<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Throwable e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            error<span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> ZuulException<span style="color:#f92672">(</span>e<span style="color:#f92672">,</span> 500<span style="color:#f92672">,</span> <span style="color:#e6db74">&#34;UNCAUGHT_EXCEPTION_FROM_FILTER_&#34;</span> <span style="color:#f92672">+</span> e<span style="color:#f92672">.</span><span style="color:#a6e22e">getClass</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">()));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          	<span style="color:#75715e">// 清空线程变量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            RequestContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getCurrentContext</span><span style="color:#f92672">().</span><span style="color:#a6e22e">unset</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>以上方法核心步骤：</p>
<ul>
<li>
<p>初始化请求上下文<code>RequestContext</code></p>
</li>
<li>
<p>执行 pre、route、post过滤器，如果有错，执行error过滤器</p>
</li>
</ul>
<p><code>ZuulRunner</code> - 初始化<code>RequestContext</code>中的requests和responses并转发Filter相关方法到<code>FilterProcessor</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ZuulRunner</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">private</span> <span style="color:#66d9ef">boolean</span> bufferRequests<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 省略...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * 初始化RequestContext：生成请求和响应wapper保存
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * RequestContext：继承了ConcurrentHashMap，是一个Map容器，主要存放请求、响应供ZuulFilters使用。
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init</span><span style="color:#f92672">(</span>HttpServletRequest servletRequest<span style="color:#f92672">,</span> HttpServletResponse servletResponse<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        RequestContext ctx <span style="color:#f92672">=</span> RequestContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getCurrentContext</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>bufferRequests<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            ctx<span style="color:#f92672">.</span><span style="color:#a6e22e">setRequest</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> HttpServletRequestWrapper<span style="color:#f92672">(</span>servletRequest<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            ctx<span style="color:#f92672">.</span><span style="color:#a6e22e">setRequest</span><span style="color:#f92672">(</span>servletRequest<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        ctx<span style="color:#f92672">.</span><span style="color:#a6e22e">setResponse</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> HttpServletResponseWrapper<span style="color:#f92672">(</span>servletResponse<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * executes &#34;post&#34; filterType  ZuulFilters
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     *
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     * @throws ZuulException
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">     */</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">postRoute</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> ZuulException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        FilterProcessor<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">().</span><span style="color:#a6e22e">postRoute</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// 省略route() preRoute() error() 方法
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#f92672">}</span>	
</span></span></code></pre></div><p>以上看出Zuul是通过<code>ZuulServletFilter</code>以filter的方式（或者以<code>ZuulServlet</code>以servlet的方式）拦截或者承接我们的请求，并在<code>doFilter</code>方法（<code>service</code>方法）中处理各种类型的ZuulFilters，并通过<code>ZuulRunner</code>转发到<code>FilterProcessor</code>中找到对应的filter并执行相关逻辑。整个大致流程比较简单清晰，类似于设计模式中的门面模式。</p>
<p>​	其中，<code>RequestContext</code>是存在<code>ThreadLocal</code>当中，可以注意到当Zuul处理完毕之后，会清空线程变量<code>RequestContext</code>,以防止内存泄露。</p>
<h3 id="filterprocessor怎么找到相应zuulfilters并执行呢"><code>FilterProcessor</code>怎么找到相应ZuulFilters并执行呢？</h3>
<p><code>FilterProcessor</code> - 执行filters的核心类</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 执行对应阶段ZuulFilters
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* sType：即为filterType，例如&#34;post&#34;、&#34;pre&#34;、&#34;route&#34;、&#34;error&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object <span style="color:#a6e22e">runFilters</span><span style="color:#f92672">(</span>String sType<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Throwable <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>RequestContext<span style="color:#f92672">.</span><span style="color:#a6e22e">getCurrentContext</span><span style="color:#f92672">().</span><span style="color:#a6e22e">debugRouting</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            Debug<span style="color:#f92672">.</span><span style="color:#a6e22e">addRoutingDebug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Invoking {&#34;</span> <span style="color:#f92672">+</span> sType <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;} type filters&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">boolean</span> bResult <span style="color:#f92672">=</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>			  <span style="color:#75715e">// 获取已经注册了的ZuulFilters，根本是从FilterRegistry中获取。并且list是已经排好序的，
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  			<span style="color:#75715e">// 根据给定的filterOrder
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        List<span style="color:#f92672">&lt;</span>ZuulFilter<span style="color:#f92672">&gt;</span> list <span style="color:#f92672">=</span> FilterLoader<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstance</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getFiltersByType</span><span style="color:#f92672">(</span>sType<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>list <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">size</span><span style="color:#f92672">();</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                ZuulFilter zuulFilter <span style="color:#f92672">=</span> list<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>i<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#75715e">// 执行ZuulFilter逻辑并
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                Object result <span style="color:#f92672">=</span> processZuulFilter<span style="color:#f92672">(</span>zuulFilter<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>result <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> result <span style="color:#66d9ef">instanceof</span> Boolean<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    bResult <span style="color:#f92672">|=</span> <span style="color:#f92672">((</span>Boolean<span style="color:#f92672">)</span> result<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> bResult<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">/**
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">* 执行ZuulFilter，并把执行情况组合成ZuulFilterResult并返回
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">*/</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Object <span style="color:#a6e22e">processZuulFilter</span><span style="color:#f92672">(</span>ZuulFilter filter<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> ZuulException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 省略部分代码...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#75715e">// 具体执行在 ZuulFilter#runFilter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  ZuulFilterResult result <span style="color:#f92672">=</span> filter<span style="color:#f92672">.</span><span style="color:#a6e22e">runFilter</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  ExecutionStatus s <span style="color:#f92672">=</span> result<span style="color:#f92672">.</span><span style="color:#a6e22e">getStatus</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">switch</span> <span style="color:#f92672">(</span>s<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> FAILED<span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      t <span style="color:#f92672">=</span> result<span style="color:#f92672">.</span><span style="color:#a6e22e">getException</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>      ctx<span style="color:#f92672">.</span><span style="color:#a6e22e">addFilterExecutionSummary</span><span style="color:#f92672">(</span>filterName<span style="color:#f92672">,</span> ExecutionStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">FAILED</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span><span style="color:#f92672">(),</span> execTime<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">case</span> SUCCESS<span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      o <span style="color:#f92672">=</span> result<span style="color:#f92672">.</span><span style="color:#a6e22e">getResult</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>      ctx<span style="color:#f92672">.</span><span style="color:#a6e22e">addFilterExecutionSummary</span><span style="color:#f92672">(</span>filterName<span style="color:#f92672">,</span> ExecutionStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">SUCCESS</span><span style="color:#f92672">.</span><span style="color:#a6e22e">name</span><span style="color:#f92672">(),</span> execTime<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">default</span><span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">break</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>t <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#66d9ef">throw</span> t<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 统计每个filter的每次执行情况
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  usageNotifier<span style="color:#f92672">.</span><span style="color:#a6e22e">notify</span><span style="color:#f92672">(</span>filter<span style="color:#f92672">,</span> s<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> o<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>以上方法核心步骤：</p>
<ul>
<li>
<p>按序执行各阶段ZuulFilters</p>
</li>
<li>
<p>记录ZuulFilter执行结果</p>
</li>
<li>
<p>统计执行情况</p>
</li>
</ul>
<p><code>ZuulFilter</code> - 最基本的Filter抽象类，自定义的Filter是继承此Filter，<code>FilterProcessor</code>执行Filter最终会转发到此类的<code>runFilter</code>方法</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span> <span style="color:#66d9ef">public</span> ZuulFilterResult <span style="color:#a6e22e">runFilter</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// 执行结果以及执行成功与否情况包装成ZuulFilterResult返回
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>   ZuulFilterResult zr <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ZuulFilterResult<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// 此filter是已被archaius禁用 「archaius是netflix开源的动态属性配置框架」
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>   <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>isFilterDisabled<span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">// 执行自定filter的shouldFilter方法判断是否执行此filter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>     <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>shouldFilter<span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>       Tracer t <span style="color:#f92672">=</span> TracerFactory<span style="color:#f92672">.</span><span style="color:#a6e22e">instance</span><span style="color:#f92672">().</span><span style="color:#a6e22e">startMicroTracer</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;ZUUL::&#34;</span> <span style="color:#f92672">+</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getClass</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getSimpleName</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>         Object res <span style="color:#f92672">=</span> run<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>         zr <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ZuulFilterResult<span style="color:#f92672">(</span>res<span style="color:#f92672">,</span> ExecutionStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">SUCCESS</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Throwable e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>         t<span style="color:#f92672">.</span><span style="color:#a6e22e">setName</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;ZUUL::&#34;</span> <span style="color:#f92672">+</span> <span style="color:#66d9ef">this</span><span style="color:#f92672">.</span><span style="color:#a6e22e">getClass</span><span style="color:#f92672">().</span><span style="color:#a6e22e">getSimpleName</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; failed&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>         zr <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ZuulFilterResult<span style="color:#f92672">(</span>ExecutionStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">FAILED</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>         zr<span style="color:#f92672">.</span><span style="color:#a6e22e">setException</span><span style="color:#f92672">(</span>e<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">}</span> <span style="color:#66d9ef">finally</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>         t<span style="color:#f92672">.</span><span style="color:#a6e22e">stopAndLog</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>       <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>     <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>       zr <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ZuulFilterResult<span style="color:#f92672">(</span>ExecutionStatus<span style="color:#f92672">.</span><span style="color:#a6e22e">SKIPPED</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>     <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">return</span> zr<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span> <span style="color:#f92672">}</span>
</span></span></code></pre></div><p>Zuul把ZuulFilters存储在类<code>FilterLoader</code>属性名为<code>hashFiltersByType</code>的<code>ConcurrentHashMap</code>中，key为filterType(eg: pre、route、post、error或者自定义)</p>
<p>那么问题来了，这些存在于<code>FilterLoader</code>的ZuulFilter是怎么加载进来的呢？</p>
<h3 id="zuulfilter的加载">ZuulFIlter的加载</h3>
<p>通过层层搜索，找到类<code>FilterFileManager</code> ，在此类初始化的时候，会到指定路径下读取指定文件。同时在初始时，会创建守护线程来定时扫描加载文件。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FilterFileManager</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 省略代码...
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> pollingIntervalSeconds<span style="color:#f92672">,</span> String<span style="color:#f92672">...</span> directories<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception<span style="color:#f92672">,</span> IllegalAccessException<span style="color:#f92672">,</span> InstantiationException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>INSTANCE <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> INSTANCE <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> FilterFileManager<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    INSTANCE<span style="color:#f92672">.</span><span style="color:#a6e22e">aDirectories</span> <span style="color:#f92672">=</span> directories<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 守护线程的轮询间隔时间
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    INSTANCE<span style="color:#f92672">.</span><span style="color:#a6e22e">pollingIntervalSeconds</span> <span style="color:#f92672">=</span> pollingIntervalSeconds<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 读取并处理文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    INSTANCE<span style="color:#f92672">.</span><span style="color:#a6e22e">manageFiles</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 开启文件扫描的守护线程
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    INSTANCE<span style="color:#f92672">.</span><span style="color:#a6e22e">startPoller</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">manageFiles</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception<span style="color:#f92672">,</span> IllegalAccessException<span style="color:#f92672">,</span> InstantiationException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 读取文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>				List<span style="color:#f92672">&lt;</span>File<span style="color:#f92672">&gt;</span> aFiles <span style="color:#f92672">=</span> getFiles<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    		<span style="color:#75715e">// 通过FilterLoader来处理文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        processGroovyFiles<span style="color:#f92672">(</span>aFiles<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 扫描指定目录下的指定类型文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  List<span style="color:#f92672">&lt;</span>File<span style="color:#f92672">&gt;</span> <span style="color:#a6e22e">getFiles</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    List<span style="color:#f92672">&lt;</span>File<span style="color:#f92672">&gt;</span> list <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;</span>File<span style="color:#f92672">&gt;();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>String sDirectory <span style="color:#f92672">:</span> aDirectories<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>sDirectory <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        File directory <span style="color:#f92672">=</span> getDirectory<span style="color:#f92672">(</span>sDirectory<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Zuul有自带类`GroovyFileFilter`是扫描 .groovy 文件.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        File<span style="color:#f92672">[]</span> aFiles <span style="color:#f92672">=</span> directory<span style="color:#f92672">.</span><span style="color:#a6e22e">listFiles</span><span style="color:#f92672">(</span>FILENAME_FILTER<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>aFiles <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          list<span style="color:#f92672">.</span><span style="color:#a6e22e">addAll</span><span style="color:#f92672">(</span>Arrays<span style="color:#f92672">.</span><span style="color:#a6e22e">asList</span><span style="color:#f92672">(</span>aFiles<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> list<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 开启守护线程进行轮询
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">startPoller</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    poller <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;GroovyFilterFileManagerPoller&#34;</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">while</span> <span style="color:#f92672">(</span>bRunning<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            sleep<span style="color:#f92672">(</span>pollingIntervalSeconds <span style="color:#f92672">*</span> 1000<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            manageFiles<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            e<span style="color:#f92672">.</span><span style="color:#a6e22e">printStackTrace</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>          <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">};</span>
</span></span><span style="display:flex;"><span>    poller<span style="color:#f92672">.</span><span style="color:#a6e22e">setDaemon</span><span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    poller<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">FilterLoader</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// 处理文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">putFilter</span><span style="color:#f92672">(</span>File file<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    String sName <span style="color:#f92672">=</span> file<span style="color:#f92672">.</span><span style="color:#a6e22e">getAbsolutePath</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> file<span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// 判断如果文件被修改过，则删除对应已经注册的filter
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>filterClassLastModified<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>sName<span style="color:#f92672">)</span> <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">(</span>file<span style="color:#f92672">.</span><span style="color:#a6e22e">lastModified</span><span style="color:#f92672">()</span> <span style="color:#f92672">!=</span> filterClassLastModified<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>sName<span style="color:#f92672">)))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      LOG<span style="color:#f92672">.</span><span style="color:#a6e22e">debug</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;reloading filter &#34;</span> <span style="color:#f92672">+</span> sName<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      filterRegistry<span style="color:#f92672">.</span><span style="color:#a6e22e">remove</span><span style="color:#f92672">(</span>sName<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    ZuulFilter filter <span style="color:#f92672">=</span> filterRegistry<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>sName<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>filter <span style="color:#f92672">==</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 编译文件 - zuul自带GroovyCompiler编译groovy编写的文件
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      Class clazz <span style="color:#f92672">=</span> COMPILER<span style="color:#f92672">.</span><span style="color:#a6e22e">compile</span><span style="color:#f92672">(</span>file<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// 如果不是抽象类即ZuulFilter，则进行实例化并放入内存
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>Modifier<span style="color:#f92672">.</span><span style="color:#a6e22e">isAbstract</span><span style="color:#f92672">(</span>clazz<span style="color:#f92672">.</span><span style="color:#a6e22e">getModifiers</span><span style="color:#f92672">()))</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        filter <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>ZuulFilter<span style="color:#f92672">)</span> FILTER_FACTORY<span style="color:#f92672">.</span><span style="color:#a6e22e">newInstance</span><span style="color:#f92672">(</span>clazz<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>ZuulFilter<span style="color:#f92672">&gt;</span> list <span style="color:#f92672">=</span> hashFiltersByType<span style="color:#f92672">.</span><span style="color:#a6e22e">get</span><span style="color:#f92672">(</span>filter<span style="color:#f92672">.</span><span style="color:#a6e22e">filterType</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>list <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>          hashFiltersByType<span style="color:#f92672">.</span><span style="color:#a6e22e">remove</span><span style="color:#f92672">(</span>filter<span style="color:#f92672">.</span><span style="color:#a6e22e">filterType</span><span style="color:#f92672">());</span> <span style="color:#75715e">//rebuild this list
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        filterRegistry<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>file<span style="color:#f92672">.</span><span style="color:#a6e22e">getAbsolutePath</span><span style="color:#f92672">()</span> <span style="color:#f92672">+</span> file<span style="color:#f92672">.</span><span style="color:#a6e22e">getName</span><span style="color:#f92672">(),</span> filter<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        filterClassLastModified<span style="color:#f92672">.</span><span style="color:#a6e22e">put</span><span style="color:#f92672">(</span>sName<span style="color:#f92672">,</span> file<span style="color:#f92672">.</span><span style="color:#a6e22e">lastModified</span><span style="color:#f92672">());</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">false</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">}</span>	
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>以上两个类核心步骤 即为 <code>FilterFileManager</code>初始化过程</p>
<ul>
<li>扫描指定目录下的groovy文件，通过<code>FilterLoader</code>编译文件，并加载ZuulFilter</li>
<li>开启守护进程，轮询文件，动态加载ZuulFilter</li>
</ul>
<h2 id="总结">总结</h2>
<ul>
<li>Zuul的源码执行路径：</li>
</ul>
<p><img src="http://qiniu.5ires.top/uPic/image-20200724141526966.png" alt="image-20200724141526966"></p>
<ul>
<li>
<p>ZuulFilter的加载方式：是通过扫描<code>.groovy</code>文件来加载，并支持动态加载，具体可以看官方示例zuul-simple-webapp</p>
</li>
<li>
<p>Zuul的整个流程，是基于servlet或filter方式在service或doFilter方法中衔接请求，并运用类似<a href="https://zh.wikipedia.org/wiki/%E5%A4%96%E8%A7%80%E6%A8%A1%E5%BC%8F">门面模式</a>编写</p>
</li>
</ul>
<p>​      至此，Zuulfilter的加载以及各类型Filter的执行都在源码中找到了。zuul-core的代码还是很容易能看懂。下一篇，会分析SpringCloud怎么整合Zuul。</p>]]></content>
        </item>
        
        <item>
            <title>Hytrix线程池设置坑</title>
            <link>https://goldpumpkin.life/posts/2020/07/hytrix%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AE%BE%E7%BD%AE%E5%9D%91/</link>
            <pubDate>Tue, 14 Jul 2020 00:00:00 +0000</pubDate>
            
            <guid>https://goldpumpkin.life/posts/2020/07/hytrix%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AE%BE%E7%BD%AE%E5%9D%91/</guid>
            <description>&lt;p&gt;最近遇到修改 Hytrix 线程池配置，不生效的情况。然后发现了一些坑。。。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>最近遇到修改 Hytrix 线程池配置，不生效的情况。然后发现了一些坑。。。</p>
<h3 id="background">Background</h3>
<p>基于hystrix版本</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-xml" data-lang="xml"><span style="display:flex;"><span> <span style="color:#f92672">&lt;dependency&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;groupId&gt;</span>com.netflix.hystrix<span style="color:#f92672">&lt;/groupId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;artifactId&gt;</span>hystrix-core<span style="color:#f92672">&lt;/artifactId&gt;</span>
</span></span><span style="display:flex;"><span>      <span style="color:#f92672">&lt;version&gt;</span>1.5.12<span style="color:#f92672">&lt;/version&gt;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">&lt;/dependency&gt;</span>
</span></span></code></pre></div><p>配置</p>
<pre tabindex="0"><code class="language-properties" data-lang="properties">hystrix.threadpool.default.coreSize=10
hystrix.threadpool.default.maximumSize=15
hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize=true
hystrix.threadpool.default.maxQueueSize=1000
hystrix.threadpool.default.queueSizeRejectionThreshold=1000
</code></pre><p>现象</p>
<p>在此配置之下，测试线程数始终不能达到最大线程数</p>
<h3 id="why">Why</h3>
<p>是什么样的逻辑，导致<code>maximumSize</code>配置失效？需要一步步深入源码探索</p>
<ul>
<li>
<p>hytrixs使用的线程池是jdk的线程池吗？</p>
<p><code>HystrixThreadPoolProperties</code> ：hytrix线程池的配置类</p>
<p><code>HystrixThreadPool</code> ：hytrix的线程池interface，其中有静态内部类<code>Factory</code>,一眼看到<code>getInstance</code>方法，追溯到另一个静态内部类<code>HystrixThreadPoolDefault</code>，再到<code>HystrixConcurrencyStrategy</code>,终于找到了线程池的创建方法<code>getThreadPool</code></p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200714190115273.png" alt="image-20200714190115273"></p>
<p>由此可以看出hytrix是使用jdk的线程池，所以线程池的运行规则应该都是一样的。</p>
<blockquote>
<p>回顾java线程池的运行规则：</p>
<ul>
<li>假设第一次运行线程池，当有任务来的时候，首先创建线程直到线程数达到核心线程数</li>
<li>核心线程数量的线程被占满，之后的任务加入到阻塞队列当中</li>
<li>当核心线程数和阻塞队列都被占满，之后的任务到达线程池，线程池则会创建更多的线程，直到存在的线程数量达到最大线程配置的数量</li>
<li>当最大线程数量的线程和队列都被占满，之后的任务到达线程池，那么线程池会根据拒绝策略执行相关逻辑</li>
</ul>
</blockquote>
</li>
<li>
<p>导致的失效的具体代码逻辑</p>
<p><code>HystrixContextScheduler</code>,由于hytrix的源代码是使用<code>RxJava</code>框架来写的，不太理解，最终打断点找到了此类，进入了<code>schedule</code>方法。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">public</span> Subscription <span style="color:#a6e22e">schedule</span><span style="color:#f92672">(</span>Action0 action<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>threadPool <span style="color:#f92672">!=</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>  		<span style="color:#75715e">// 线程池队列无可用空间时，直接拒绝任务  
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#66d9ef">if</span> <span style="color:#f92672">(!</span>threadPool<span style="color:#f92672">.</span><span style="color:#a6e22e">isQueueSpaceAvailable</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>         <span style="color:#66d9ef">throw</span> <span style="color:#66d9ef">new</span> RejectedExecutionException<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Rejected command because thread-pool queueSize is at rejection threshold.&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>   <span style="color:#66d9ef">return</span> worker<span style="color:#f92672">.</span><span style="color:#a6e22e">schedule</span><span style="color:#f92672">(</span><span style="color:#66d9ef">new</span> HystrixContexSchedulerAction<span style="color:#f92672">(</span>concurrencyStrategy<span style="color:#f92672">,</span> action<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>可以看到，再添加action之前，会校验线程池的队列空间是否可用。具体逻辑如下：</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span> <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">boolean</span> <span style="color:#a6e22e">isQueueSpaceAvailable</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>   <span style="color:#75715e">// 1. 配置的队列的数量小于等于0，直接返回true。那么继上一步任务会给到线程池，由它决定任务执行与否
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>   <span style="color:#66d9ef">if</span> <span style="color:#f92672">(</span>queueSize <span style="color:#f92672">&lt;=</span> 0<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>     <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">true</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">}</span> <span style="color:#66d9ef">else</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>     <span style="color:#75715e">// 2. 线程池中已有任务队列的数量 vs queueSizeRejectionThreshold配置数量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>     <span style="color:#66d9ef">return</span> threadPool<span style="color:#f92672">.</span><span style="color:#a6e22e">getQueue</span><span style="color:#f92672">().</span><span style="color:#a6e22e">size</span><span style="color:#f92672">()</span> <span style="color:#f92672">&lt;</span> properties<span style="color:#f92672">.</span><span style="color:#a6e22e">queueSizeRejectionThreshold</span><span style="color:#f92672">().</span><span style="color:#a6e22e">get</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>   <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><p>根据此代码逻辑可以得出：</p>
<ul>
<li>配置线程池队列大小参数为-1时，任务的执行与否交给java线程池决定，此时队列是同步队列，那么当并发任务数量大于核心线程数小于最大线程数的时候，是应该会创建新的线程来执行此任务。那么<code>maximumSize</code>的配置是有效的</li>
<li>配置线程池队列的<code>maxQueueSize</code>大于等于<code>queueSizeRejectionThreshold</code>配置时。若此时并发数达到了核心线程数和<code>maxQueueSize</code>配置之和，再有任务需要执行时，根据此逻辑，会返回<code>false</code>，拒绝任务的执行，并不会交给线程池处理。从而使得<code>maximumSize</code>的配置是无效的。</li>
</ul>
<p>由此，我们追溯到了<code>maximumSize</code>配置无效的原因。</p>
</li>
</ul>
<h3 id="让maximumsize变得有效">让<code>maximumSize</code>变得有效</h3>
<ul>
<li>不使用线程池的队列，直接将maxQueueSize配置设为 -1</li>
<li><code>queueSizeRejectionThreshold</code>配置大于<code>maxQueueSize</code>也可以让线程池中线程的数量达到<code>maximumSize</code>数量，但是此时<code>queueSizeRejectionThreshold</code>配置并没有起到它应该承担的意义，因为线程池中队列的大小永远不可能达到<code>queueSizeRejectionThreshold</code>配置的数量</li>
</ul>
<h3 id="验证分析">验证分析</h3>
<ul>
<li>
<p><a href="https://github.com/Netflix/Hystrix/wiki/Configuration#ThreadPool">hytrix线程池配置简介</a></p>
<pre tabindex="0"><code class="language-properties" data-lang="properties"># 核心线程数 默认值10
hystrix.threadpool.default.coreSize=10
# 最大线程数 默认值10 在1.5.9版本之前该值总是等于coreSize
hystrix.threadpool.default.maximumSize=10
# 阻塞队列大小 默认值-1表示使用同步队列 
hystrix.threadpool.default.maxQueueSize=-1
# 阻塞队列大小拒绝阈值 默认值为5 当maxQueueSize=-1时，不起作用
hystrix.threadpool.default.queueSizeRejectionThreshold=5
# 释放线程时间 min为单位 默认为1min，当最大线程数大于核心线程数的时
hystrix.threadpool.default.keepAliveTimeMinutes=1
# 是否允许maximumSize配置生效，默认值为false
hystrix.threadpool.default.allowMaximumSizeToDivergeFromCoreSize=true
</code></pre></li>
<li>
<p>代码验证</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-java" data-lang="java"><span style="display:flex;"><span><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">HystrixThreadPoolTest</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">public</span> <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">main</span><span style="color:#f92672">(</span>String<span style="color:#f92672">[]</span> args<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> InterruptedException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>      	<span style="color:#75715e">// 变量
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> coreSize <span style="color:#f92672">=</span> 5<span style="color:#f92672">,</span> maximumSize <span style="color:#f92672">=</span> 10<span style="color:#f92672">,</span> maxQueueSize <span style="color:#f92672">=</span> 5<span style="color:#f92672">,</span> rejThresholdSize <span style="color:#f92672">=</span> 6<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        HystrixCommand<span style="color:#f92672">.</span><span style="color:#a6e22e">Setter</span> commandConfig <span style="color:#f92672">=</span> generateCommandConfig<span style="color:#f92672">(</span>coreSize<span style="color:#f92672">,</span> maximumSize<span style="color:#f92672">,</span> maxQueueSize<span style="color:#f92672">,</span> rejThresholdSize<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Run command once, so we can get metrics.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        runOnce<span style="color:#f92672">(</span>commandConfig<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 模拟并发
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">final</span> CountDownLatch stopLatch <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> CountDownLatch<span style="color:#f92672">(</span>1<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        List<span style="color:#f92672">&lt;</span>Thread<span style="color:#f92672">&gt;</span> threads <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> ArrayList<span style="color:#f92672">&lt;</span>Thread<span style="color:#f92672">&gt;();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> 0<span style="color:#f92672">;</span> i <span style="color:#f92672">&lt;</span> coreSize <span style="color:#f92672">+</span> maximumSize <span style="color:#f92672">+</span> maxQueueSize <span style="color:#f92672">+</span> rejThresholdSize<span style="color:#f92672">;</span> i<span style="color:#f92672">++)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">final</span> <span style="color:#66d9ef">int</span> fi <span style="color:#f92672">=</span> i <span style="color:#f92672">+</span> 1<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            String threadName <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TestThread-&#34;</span> <span style="color:#f92672">+</span> fi<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            Thread thread <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> Thread<span style="color:#f92672">(()</span> <span style="color:#f92672">-&gt;</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">try</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    HystrixCommand<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> command <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HystrixCommand<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;(</span>commandConfig<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#66d9ef">protected</span> Void <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span> <span style="color:#66d9ef">throws</span> Exception <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                            stopLatch<span style="color:#f92672">.</span><span style="color:#a6e22e">await</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                            <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>                        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">};</span>
</span></span><span style="display:flex;"><span>                    command<span style="color:#f92672">.</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span> <span style="color:#66d9ef">catch</span> <span style="color:#f92672">(</span>Exception e<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Thread:&#34;</span> <span style="color:#f92672">+</span> threadName <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34; got rejected.&#34;</span><span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>                    System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>                <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">});</span>
</span></span><span style="display:flex;"><span>            thread<span style="color:#f92672">.</span><span style="color:#a6e22e">setName</span><span style="color:#f92672">(</span>threadName<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            threads<span style="color:#f92672">.</span><span style="color:#a6e22e">add</span><span style="color:#f92672">(</span>thread<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            thread<span style="color:#f92672">.</span><span style="color:#a6e22e">start</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">sleep</span><span style="color:#f92672">(</span>200<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;start:&#34;</span> <span style="color:#f92672">+</span> threadName<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>            printThreadPoolStatus<span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// 线程执行释放
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        stopLatch<span style="color:#f92672">.</span><span style="color:#a6e22e">countDown</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>Thread thread <span style="color:#f92672">:</span> threads<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            thread<span style="color:#f92672">.</span><span style="color:#a6e22e">join</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">printThreadPoolStatus</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> <span style="color:#f92672">(</span>HystrixThreadPoolMetrics threadPoolMetrics <span style="color:#f92672">:</span> HystrixThreadPoolMetrics<span style="color:#f92672">.</span><span style="color:#a6e22e">getInstances</span><span style="color:#f92672">())</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            String name <span style="color:#f92672">=</span> threadPoolMetrics<span style="color:#f92672">.</span><span style="color:#a6e22e">getThreadPoolKey</span><span style="color:#f92672">().</span><span style="color:#a6e22e">name</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            Number poolSize <span style="color:#f92672">=</span> threadPoolMetrics<span style="color:#f92672">.</span><span style="color:#a6e22e">getCurrentPoolSize</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            Number queueSize <span style="color:#f92672">=</span> threadPoolMetrics<span style="color:#f92672">.</span><span style="color:#a6e22e">getCurrentQueueSize</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>            System<span style="color:#f92672">.</span><span style="color:#a6e22e">out</span><span style="color:#f92672">.</span><span style="color:#a6e22e">println</span><span style="color:#f92672">(</span><span style="color:#e6db74">&#34;ThreadPoolKey: &#34;</span> <span style="color:#f92672">+</span> name <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;, PoolSize: &#34;</span> <span style="color:#f92672">+</span> poolSize <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;, QueueSize: &#34;</span> <span style="color:#f92672">+</span> queueSize<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> HystrixCommand<span style="color:#f92672">.</span><span style="color:#a6e22e">Setter</span> <span style="color:#a6e22e">generateCommandConfig</span><span style="color:#f92672">(</span><span style="color:#66d9ef">int</span> coreSize<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> maximumSize<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> maxQueueSize<span style="color:#f92672">,</span> <span style="color:#66d9ef">int</span> rejThresholdSize<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> String commandName <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TestThreadPoolCommand&#34;</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">final</span> HystrixCommand<span style="color:#f92672">.</span><span style="color:#a6e22e">Setter</span> commandConfig <span style="color:#f92672">=</span> HystrixCommand<span style="color:#f92672">.</span><span style="color:#a6e22e">Setter</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">withGroupKey</span><span style="color:#f92672">(</span>HystrixCommandGroupKey<span style="color:#f92672">.</span><span style="color:#a6e22e">Factory</span><span style="color:#f92672">.</span><span style="color:#a6e22e">asKey</span><span style="color:#f92672">(</span>commandName<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">andCommandKey</span><span style="color:#f92672">(</span>HystrixCommandKey<span style="color:#f92672">.</span><span style="color:#a6e22e">Factory</span><span style="color:#f92672">.</span><span style="color:#a6e22e">asKey</span><span style="color:#f92672">(</span>commandName<span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">andCommandPropertiesDefaults</span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>                HystrixCommandProperties<span style="color:#f92672">.</span><span style="color:#a6e22e">Setter</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">.</span><span style="color:#a6e22e">withExecutionTimeoutEnabled</span><span style="color:#f92672">(</span><span style="color:#66d9ef">false</span><span style="color:#f92672">))</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">.</span><span style="color:#a6e22e">andThreadPoolPropertiesDefaults</span><span style="color:#f92672">(</span>
</span></span><span style="display:flex;"><span>                HystrixThreadPoolProperties<span style="color:#f92672">.</span><span style="color:#a6e22e">Setter</span><span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">.</span><span style="color:#a6e22e">withCoreSize</span><span style="color:#f92672">(</span>coreSize<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">.</span><span style="color:#a6e22e">withMaximumSize</span><span style="color:#f92672">(</span>maximumSize<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">.</span><span style="color:#a6e22e">withAllowMaximumSizeToDivergeFromCoreSize</span><span style="color:#f92672">(</span><span style="color:#66d9ef">true</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">.</span><span style="color:#a6e22e">withMaxQueueSize</span><span style="color:#f92672">(</span>maxQueueSize<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>                    <span style="color:#f92672">.</span><span style="color:#a6e22e">withQueueSizeRejectionThreshold</span><span style="color:#f92672">(</span>rejThresholdSize<span style="color:#f92672">));</span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> commandConfig<span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">runOnce</span><span style="color:#f92672">(</span>HystrixCommand<span style="color:#f92672">.</span><span style="color:#a6e22e">Setter</span> commandConfig<span style="color:#f92672">)</span> <span style="color:#66d9ef">throws</span> InterruptedException <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>        HystrixCommand<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;</span> command <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> HystrixCommand<span style="color:#f92672">&lt;</span>Void<span style="color:#f92672">&gt;(</span>commandConfig<span style="color:#f92672">)</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">@Override</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">protected</span> Void <span style="color:#a6e22e">run</span><span style="color:#f92672">()</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">null</span><span style="color:#f92672">;</span>
</span></span><span style="display:flex;"><span>            <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>        <span style="color:#f92672">};</span>
</span></span><span style="display:flex;"><span>        command<span style="color:#f92672">.</span><span style="color:#a6e22e">execute</span><span style="color:#f92672">();</span>
</span></span><span style="display:flex;"><span>        Thread<span style="color:#f92672">.</span><span style="color:#a6e22e">sleep</span><span style="color:#f92672">(</span>100<span style="color:#f92672">);</span>
</span></span><span style="display:flex;"><span>    <span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span></code></pre></div><ol>
<li>
<p>测试数据：<code>coreSize</code>=5, <code>maxQueueSize</code>=-1，<code>maximumSize</code>=10，<code>queueSizeRejectionThreshold </code>=100</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200715145014418.png" alt="image-20200715145014418"></p>
<p>结果显示：</p>
<p>第11个任务并发的时候，hytrix拒绝执行任务，因此，<code>maxQueueSize</code>为-1，<code>maximumSize</code> - 生效，<code>queueSizeRejectionThreshold </code>- 不生效</p>
</li>
<li>
<p>测试数据 <code>coreSize</code>=5, <code>maxQueueSize</code>=5，<code>maximumSize</code>=10，<code>queueSizeRejectionThreshold </code>=5</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200715152012583.png" alt="image-20200715152012583"></p>
<p>结果显示：在第11个任务并发的时候，hytrix会拒绝执行任务，因此<code>maxQueueSize</code> &gt;  0并且<code>maxQueueSize</code>=<code>queueSizeRejectionThreshold </code>时，</p>
<p><code>maximumSize</code> - 不生效，<code>queueSizeRejectionThreshold </code> - 生效</p>
</li>
<li>
<p>测试数据 <code>coreSize</code>=5, <code>maxQueueSize</code>=5，<code>maximumSize</code>=10，<code>queueSizeRejectionThreshold </code>=3</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200715152153437.png" alt="image-20200715152153437"></p>
<p>结果显示：在第9个任务并发的时候，hytrix会拒绝任务，因此，<code>maxQueueSize</code> &gt;  0并且<code>maxQueueSize</code>&gt;<code>queueSizeRejectionThreshold </code>时，</p>
<p><code>maximumSize</code> - 不生效，<code>queueSizeRejectionThreshold </code> - 生效</p>
</li>
<li>
<p>测试数据 <code>coreSize</code>=5, <code>maxQueueSize</code>=5，<code>maximumSize</code>=10，<code>queueSizeRejectionThreshold </code>=20</p>
<p><img src="http://qiniu.5ires.top/uPic/image-20200715170229628.png" alt="image-20200715170229628"></p>
<p>结果显示：在第16个任务并发的时候，hytrix会拒绝任务，因此，<code>maxQueueSize</code> &gt;  0并且<code>maxQueueSize</code>&lt;<code>queueSizeRejectionThreshold </code>时，</p>
<p><code>maximumSize</code> - 生效，<code>queueSizeRejectionThreshold </code> - 生效（像摆设，它永远比maximumSize大）</p>
</li>
</ol>
</li>
</ul>
<h3 id="结论">结论</h3>
<p>理解此hytrix的线程池配置的关键点，是在于搞清楚hytrix是否把任务交给线程池的逻辑部分，即<code>HystrixThreadPool</code>类中的<code>isQueueSpaceAvailable</code>方法，还有理清楚jdk的线程池的任务执行原理。基于提出的问题，做以下总结：</p>
<p><code>maximumSize</code> 配置是否生效取决于 <code>maxQueueSize</code> 和 <code>queueSizeRejectionThreshold </code> 这两个配置</p>
<ul>
<li>
<p><code>maxQueueSize</code> = -1， hytrix不使用同步队列，从而<code>queueSizeRejectionThreshold </code>也没用，<code>maximumSize</code>是生效的</p>
</li>
<li>
<p><code>maxQueueSize</code> &gt;=0</p>
<ul>
<li>
<p><code>maxQueueSize</code> &lt; <code>queueSizeRejectionThreshold </code>, <code>maximumSize</code>生效</p>
</li>
<li>
<p><code>maxQueueSize</code>&gt;= <code>queueSizeRejectionThreshold </code>，<code>maximumSize</code>失效</p>
</li>
</ul>
</li>
</ul>
<p><em>Ref.</em></p>
<ol>
<li><em><a href="https://zhaox.github.io/java/2019/08/06/hystrix-thread-pool">危险的线程池</a></em></li>
<li><em><a href="https://github.com/Netflix/Hystrix/wiki/Configuration#coreSize">Hytrix-Configuration</a></em></li>
<li><a href="https://github.com/Netflix/Hystrix/issues/1589">Issues</a></li>
</ol>]]></content>
        </item>
        
    </channel>
</rss>
